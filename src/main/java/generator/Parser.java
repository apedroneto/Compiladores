
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Nov 11 15:45:03 BRT 2018
//----------------------------------------------------

package generator;

import pascal.utils.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Nov 11 15:45:03 BRT 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0126\000\002\002\004\000\002\002\005\000\002\003" +
    "\006\000\002\220\005\000\002\220\002\000\002\004\004" +
    "\000\002\007\007\000\002\011\006\000\002\260\005\000" +
    "\002\260\002\000\002\240\003\000\002\240\002\000\002" +
    "\012\006\000\002\275\005\000\002\275\002\000\002\241" +
    "\003\000\002\241\002\000\002\017\005\000\002\013\006" +
    "\000\002\274\005\000\002\274\002\000\002\242\003\000" +
    "\002\242\002\000\002\021\005\000\002\014\006\000\002" +
    "\273\005\000\002\273\002\000\002\243\003\000\002\243" +
    "\002\000\002\022\005\000\002\015\003\000\002\272\005" +
    "\000\002\272\002\000\002\250\003\000\002\250\003\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\026\003\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\032\003\000\002\034\003\000\002\034\003" +
    "\000\002\010\005\000\002\230\003\000\002\025\005\000" +
    "\002\031\007\000\002\040\003\000\002\027\004\000\002" +
    "\033\004\000\002\036\005\000\002\266\005\000\002\266" +
    "\002\000\002\237\003\000\002\237\002\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\053\005\000\002\054\006\000\002\055\003\000\002" +
    "\056\003\000\002\057\003\000\002\057\003\000\002\060" +
    "\003\000\002\060\003\000\002\061\011\000\002\062\011" +
    "\000\002\265\005\000\002\265\002\000\002\247\003\000" +
    "\002\247\003\000\002\063\003\000\002\063\003\000\002" +
    "\064\006\000\002\065\006\000\002\066\004\000\002\066" +
    "\002\000\002\067\003\000\002\005\004\000\002\264\005" +
    "\000\002\264\002\000\002\070\004\000\002\070\003\000" +
    "\002\236\004\000\002\236\002\000\002\071\003\000\002" +
    "\071\002\000\002\235\003\000\002\235\003\000\002\235" +
    "\003\000\002\121\005\000\002\246\003\000\002\246\003" +
    "\000\002\074\004\000\002\075\004\000\002\072\003\000" +
    "\002\072\003\000\002\072\003\000\002\072\003\000\002" +
    "\107\005\000\002\110\003\000\002\110\003\000\002\110" +
    "\003\000\002\113\006\000\002\114\006\000\002\115\012" +
    "\000\002\245\003\000\002\245\003\000\002\116\003\000" +
    "\002\120\003\000\002\111\003\000\002\111\003\000\002" +
    "\122\007\000\002\234\002\000\002\234\004\000\002\123" +
    "\011\000\002\263\005\000\002\263\002\000\002\124\005" +
    "\000\002\125\004\000\002\255\005\000\002\255\002\000" +
    "\002\112\007\000\002\256\005\000\002\256\002\000\002" +
    "\104\006\000\002\257\005\000\002\257\002\000\002\103" +
    "\003\000\002\103\003\000\002\103\003\000\002\103\003" +
    "\000\002\102\003\000\002\105\003\000\002\106\003\000" +
    "\002\077\004\000\002\233\004\000\002\233\002\000\002" +
    "\117\005\000\002\271\005\000\002\271\002\000\002\211" +
    "\004\000\002\270\005\000\002\270\002\000\002\212\003" +
    "\000\002\212\003\000\002\212\003\000\002\212\003\000" +
    "\002\212\003\000\002\212\003\000\002\212\003\000\002" +
    "\212\003\000\002\212\005\000\002\276\002\000\002\212" +
    "\005\000\002\076\003\000\002\076\003\000\002\076\003" +
    "\000\002\166\003\000\002\166\003\000\002\167\003\000" +
    "\002\167\003\000\002\167\003\000\002\171\006\000\002" +
    "\165\005\000\002\131\005\000\002\037\004\000\002\037" +
    "\002\000\002\164\004\000\002\232\003\000\002\232\002" +
    "\000\002\216\004\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\132\003\000\002" +
    "\132\003\000\002\136\005\000\002\135\005\000\002\161" +
    "\003\000\002\162\003\000\002\133\004\000\002\225\003" +
    "\000\002\225\002\000\002\137\003\000\002\137\003\000" +
    "\002\137\003\000\002\137\003\000\002\140\011\000\002" +
    "\267\005\000\002\267\002\000\002\144\003\000\002\145" +
    "\003\000\002\141\005\000\002\142\005\000\002\146\003" +
    "\000\002\143\005\000\002\147\003\000\002\134\004\000" +
    "\002\152\004\000\002\152\002\000\002\153\004\000\002" +
    "\153\003\000\002\226\003\000\002\226\002\000\002\227" +
    "\004\000\002\227\002\000\002\150\004\000\002\261\005" +
    "\000\002\261\002\000\002\163\005\000\002\151\010\000" +
    "\002\262\005\000\002\262\002\000\002\154\003\000\002" +
    "\224\003\000\002\224\002\000\002\156\007\000\002\254" +
    "\005\000\002\254\002\000\002\157\004\000\002\223\005" +
    "\000\002\223\002\000\002\222\004\000\002\222\002\000" +
    "\002\155\003\000\002\215\003\000\002\174\003\000\002" +
    "\277\002\000\002\170\005\000\002\173\003\000\002\175" +
    "\003\000\002\101\003\000\002\172\003\000\002\051\003" +
    "\000\002\047\003\000\002\023\003\000\002\046\003\000" +
    "\002\044\003\000\002\045\003\000\002\050\003\000\002" +
    "\006\004\000\002\100\004\000\002\251\005\000\002\251" +
    "\002\000\002\252\005\000\002\252\002\000\002\253\005" +
    "\000\002\253\002\000\002\176\003\000\002\176\003\000" +
    "\002\177\003\000\002\200\006\000\002\200\004\000\002" +
    "\217\004\000\002\221\003\000\002\221\002\000\002\203" +
    "\003\000\002\204\003\000\002\204\002\000\002\202\004" +
    "\000\002\016\003\000\002\020\004\000\002\020\003\000" +
    "\002\244\003\000\002\244\003\000\002\126\003\000\002" +
    "\126\003\000\002\126\003\000\002\126\003\000\002\126" +
    "\003\000\002\126\003\000\002\126\003\000\002\127\003" +
    "\000\002\127\003\000\002\127\003\000\002\130\003\000" +
    "\002\130\003\000\002\130\003\000\002\130\003\000\002" +
    "\130\003\000\002\205\003\000\002\214\003\000\002\207" +
    "\003\000\002\207\003\000\002\210\003\000\002\210\002" +
    "\000\002\206\003\000\002\042\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01ce\000\004\004\006\001\002\000\004\002\u01d0\001" +
    "\002\000\004\005\023\001\ufff6\000\004\071\010\001\002" +
    "\000\004\047\011\001\ufffd\000\002\001\ufedc\000\004\071" +
    "\010\001\002\000\004\061\013\001\002\000\002\001\uffff" +
    "\000\004\062\017\001\uff06\000\004\050\016\001\002\000" +
    "\002\001\ufffe\000\004\071\010\001\002\000\002\001\uff0b" +
    "\000\004\062\017\001\uff06\000\002\001\uff07\000\006\053" +
    "\070\054\051\001\ufede\000\004\012\u016e\001\002\000\002" +
    "\001\ufff7\000\004\006\031\001\ufff1\000\004\063\030\001" +
    "\002\000\002\001\000\000\004\071\010\001\002\000\002" +
    "\001\ufff2\000\004\007\036\001\uffeb\000\002\001\uffec\000" +
    "\004\010\373\001\uffe5\000\004\071\010\001\002\000\004" +
    "\101\046\001\002\000\004\061\041\001\002\000\004\071" +
    "\010\001\uffed\000\002\001\uffef\000\004\061\044\001\002" +
    "\000\004\071\010\001\uffed\000\002\001\uffee\000\022\016" +
    "\057\047\064\053\070\054\051\070\055\071\010\073\ufede" +
    "\077\061\001\uff45\000\002\001\ufef5\000\004\064\370\001" +
    "\002\000\002\001\ufee1\000\002\001\uff0f\000\002\001\uff49" +
    "\000\002\001\uffea\000\004\071\010\001\002\000\002\001" +
    "\uff4c\000\002\001\uff46\000\002\001\uff4e\000\002\001\ufedd" +
    "\000\002\001\ufee3\000\002\001\uff51\000\004\071\010\001" +
    "\002\000\002\001\uff4f\000\012\017\120\044\123\045\122" +
    "\046\117\001\002\000\002\001\uff4d\000\002\001\ufee0\000" +
    "\010\053\070\054\051\071\010\001\ufede\000\002\001\ufedf" +
    "\000\002\001\uff50\000\004\073\110\001\002\000\002\001" +
    "\uff03\000\002\001\uff02\000\002\001\ufef3\000\006\063\106" +
    "\110\104\001\uff01\000\002\001\ufef4\000\002\001\uff11\000" +
    "\002\001\ufef6\000\006\053\070\054\051\001\ufede\000\002" +
    "\001\ufeff\000\004\073\110\001\ufef9\000\004\110\104\001" +
    "\ufefc\000\002\001\ufefb\000\002\001\ufefa\000\002\001\uff00" +
    "\000\002\001\ufefd\000\002\001\ufefe\000\002\001\ufef8\000" +
    "\002\001\uff42\000\004\020\362\001\002\000\004\051\347" +
    "\001\002\000\002\001\uff41\000\004\020\344\001\002\000" +
    "\006\035\133\071\010\001\uff34\000\002\001\uff43\000\002" +
    "\001\uff47\000\002\001\uff44\000\004\061\342\001\uff2e\000" +
    "\004\061\336\001\uff2b\000\004\061\334\001\uff30\000\004" +
    "\060\331\001\002\000\004\061\141\001\uff24\000\004\013" +
    "\136\001\002\000\002\001\uff32\000\002\001\uff3b\000\002" +
    "\001\uff25\000\004\071\010\001\002\000\006\053\070\054" +
    "\051\001\ufede\000\002\001\uff26\000\004\060\304\001\uff1c" +
    "\000\022\037\175\040\173\047\161\051\165\053\070\054" +
    "\051\071\010\077\061\001\ufede\000\020\101\157\102\155" +
    "\103\154\104\156\105\150\106\147\107\151\001\uff74\000" +
    "\002\001\uff1b\000\002\001\ufeed\000\002\001\ufeee\000\002" +
    "\001\ufeec\000\006\053\070\054\051\001\ufede\000\002\001" +
    "\uff76\000\002\001\ufef0\000\002\001\ufef1\000\002\001\ufeef" +
    "\000\002\001\ufef2\000\002\001\uff75\000\006\053\070\054" +
    "\051\001\ufede\000\002\001\uff68\000\002\001\uff5f\000\002" +
    "\001\uff5c\000\010\052\uff56\053\070\054\051\001\ufede\000" +
    "\002\001\uff66\000\002\001\uff67\000\002\001\uff5e\000\002" +
    "\001\uff6b\000\004\047\uff0d\001\uff12\000\002\001\uff64\000" +
    "\004\047\254\001\uff53\000\002\001\uff69\000\004\063\247" +
    "\001\002\000\002\001\uff60\000\004\070\246\001\002\000" +
    "\002\001\uff6a\000\010\042\243\053\242\054\240\001\uff71" +
    "\000\002\001\uff5d\000\002\001\uff18\000\010\051\uff13\063" +
    "\uff16\070\uff19\001\uff6d\000\004\051\225\001\002\000\002" +
    "\001\uff62\000\014\041\220\043\216\055\217\056\221\057" +
    "\215\001\uff6e\000\002\001\uff61\000\002\001\uff5b\000\002" +
    "\001\uff6c\000\002\001\uff70\000\002\001\ufee5\000\002\001" +
    "\ufee4\000\002\001\ufee7\000\002\001\ufee6\000\002\001\ufee8" +
    "\000\022\037\175\040\173\047\161\051\165\053\070\054" +
    "\051\071\010\077\061\001\ufede\000\014\041\220\043\216" +
    "\055\217\056\221\057\215\001\uff6e\000\002\001\uff6f\000" +
    "\006\053\070\054\051\001\ufede\000\004\052\234\001\002" +
    "\000\004\062\230\001\uff04\000\006\053\070\054\051\001" +
    "\ufede\000\002\001\uff0a\000\004\062\230\001\uff04\000\002" +
    "\001\uff05\000\002\001\uff5a\000\004\070\236\001\002\000" +
    "\002\001\uff17\000\002\001\uff73\000\002\001\ufeeb\000\022" +
    "\037\175\040\173\047\161\051\165\053\070\054\051\071" +
    "\010\077\061\001\ufede\000\002\001\ufeea\000\002\001\ufee9" +
    "\000\010\042\243\053\242\054\240\001\uff71\000\002\001" +
    "\uff72\000\002\001\uff52\000\004\071\010\001\002\000\002" +
    "\001\uff59\000\002\001\uff12\000\002\001\uff55\000\002\001" +
    "\uff54\000\010\053\070\054\051\071\010\001\ufede\000\014" +
    "\013\uff0e\026\uff0e\034\uff0e\047\uff0e\061\uff0e\001\uff12\000" +
    "\002\001\uff7a\000\004\062\270\001\uff7e\000\002\001\uff7b" +
    "\000\002\001\uff79\000\010\051\uff13\063\uff16\070\uff19\001" +
    "\uff14\000\002\001\uff7d\000\002\001\uff7c\000\002\001\uff77" +
    "\000\002\001\uff78\000\004\050\273\001\002\000\010\053" +
    "\070\054\051\071\010\001\ufede\000\004\062\270\001\uff7e" +
    "\000\002\001\uff7f\000\002\001\uff80\000\022\037\175\040" +
    "\173\047\161\051\165\053\070\054\051\071\010\077\061" +
    "\001\ufede\000\002\001\uff63\000\004\052\301\001\002\000" +
    "\004\062\230\001\uff04\000\002\001\uff57\000\002\001\uff58" +
    "\000\004\050\303\001\002\000\002\001\uff65\000\006\053" +
    "\070\054\051\001\ufede\000\002\001\uff1f\000\002\001\uff1d" +
    "\000\002\001\uff1a\000\004\020\311\001\002\000\010\053" +
    "\070\054\051\077\061\001\ufede\000\004\061\325\001\uff27" +
    "\000\004\062\321\001\uff84\000\004\060\315\001\002\000" +
    "\004\047\316\001\002\000\006\035\133\071\010\001\uff34" +
    "\000\004\050\320\001\002\000\002\001\uff23\000\010\053" +
    "\070\054\051\077\061\001\ufede\000\002\001\uff86\000\004" +
    "\062\321\001\uff84\000\002\001\uff85\000\010\053\070\054" +
    "\051\077\061\001\ufede\000\002\001\uff29\000\004\061\325" +
    "\001\uff27\000\002\001\uff28\000\022\016\057\047\064\053" +
    "\070\054\051\070\055\071\010\073\ufede\077\061\001\uff45" +
    "\000\002\001\uff2a\000\002\001\uff35\000\002\001\uff31\000" +
    "\002\001\uff2d\000\004\071\010\001\002\000\004\061\336" +
    "\001\uff2b\000\002\001\uff2c\000\002\001\uff33\000\004\035" +
    "\133\001\002\000\002\001\uff2f\000\022\016\057\047\064" +
    "\053\070\054\051\070\055\071\010\073\ufede\077\061\001" +
    "\uff45\000\002\001\uff39\000\002\001\uff3a\000\012\047\064" +
    "\053\070\054\051\077\061\001\ufede\000\002\001\uff3d\000" +
    "\004\060\352\001\uff3e\000\012\047\064\053\070\054\051" +
    "\077\061\001\ufede\000\004\052\354\001\002\000\004\020" +
    "\355\001\002\000\022\016\057\047\064\053\070\054\051" +
    "\070\055\071\010\073\ufede\077\061\001\uff45\000\002\001" +
    "\uff3c\000\002\001\uff40\000\004\060\352\001\uff3e\000\002" +
    "\001\uff3f\000\022\016\057\047\064\053\070\054\051\070" +
    "\055\071\010\073\ufede\077\061\001\uff45\000\002\001\uff37" +
    "\000\002\001\uff38\000\004\050\366\001\002\000\002\001" +
    "\uff4b\000\002\001\uff36\000\010\053\070\054\051\077\061" +
    "\001\ufede\000\002\001\uff48\000\002\001\uff4a\000\004\071" +
    "\010\001\002\000\006\014\u0101\015\u0105\001\uffe1\000\002" +
    "\001\uffe6\000\004\061\u015a\001\002\000\002\001\uffdf\000" +
    "\004\061\u0156\001\002\000\004\071\010\001\002\000\004" +
    "\061\u014e\001\002\000\004\061\u014b\001\002\000\002\001" +
    "\uffe0\000\004\071\010\001\002\000\002\001\ufffb\000\002" +
    "\001\uffe3\000\004\061\u0109\001\002\000\006\014\u0101\015" +
    "\u0105\001\uffe1\000\002\001\uffe2\000\006\047\u010f\061\uff0d" +
    "\001\uffc9\000\002\001\uffce\000\004\060\u0148\001\002\000" +
    "\002\001\uffca\000\012\010\u0117\014\u0114\015\u0119\071\010" +
    "\001\002\000\002\001\uffc8\000\002\001\uffc5\000\002\001" +
    "\uffc6\000\002\001\uffc1\000\004\071\010\001\002\000\002" +
    "\001\uffc7\000\002\001\uffc2\000\004\071\010\001\002\000" +
    "\004\060\u011d\001\002\000\004\071\010\001\002\000\004" +
    "\050\u011b\001\002\000\002\001\uffcd\000\004\047\u010f\001" +
    "\uffc9\000\010\016\u0124\017\u0120\071\010\001\002\000\002" +
    "\001\uffc4\000\002\001\uffbe\000\004\051\u0138\001\002\000" +
    "\002\001\uffc0\000\002\001\uffbf\000\002\001\uffbd\000\004" +
    "\017\u0125\001\002\000\004\051\u0126\001\002\000\006\071" +
    "\010\073\u012a\001\002\000\002\001\uffb6\000\004\052\u0135" +
    "\001\002\000\004\064\u0132\001\002\000\004\064\u012c\001" +
    "\002\000\002\001\uffb5\000\004\073\u012d\001\002\000\004" +
    "\060\u012f\001\uffb1\000\002\001\uffb3\000\004\071\010\001" +
    "\002\000\002\001\uffb2\000\002\001\uffb0\000\004\071\010" +
    "\001\002\000\004\060\u012f\001\uffb1\000\002\001\uffb4\000" +
    "\004\020\u0136\001\002\000\004\071\010\001\002\000\002" +
    "\001\uffbc\000\006\071\010\073\u012a\001\002\000\004\061" +
    "\u013a\001\uffb9\000\006\071\010\073\u012a\001\002\000\004" +
    "\052\u013c\001\002\000\004\020\u013d\001\002\000\010\016" +
    "\u0124\017\u0120\071\010\001\002\000\002\001\uffb8\000\002" +
    "\001\uffb7\000\002\001\uffbb\000\004\061\u013a\001\uffb9\000" +
    "\002\001\uffba\000\004\060\u0144\001\002\000\010\016\u0124" +
    "\017\u0120\071\010\001\002\000\002\001\uffc3\000\004\047" +
    "\u010f\001\uffc9\000\002\001\uffd2\000\004\071\010\001\002" +
    "\000\002\001\uffd0\000\002\001\uffd1\000\004\005\023\001" +
    "\ufff6\000\002\001\uffdc\000\002\001\uffdb\000\010\005\023" +
    "\011\u014f\021\u0151\001\ufff6\000\002\001\uffd6\000\002\001" +
    "\uffde\000\002\001\uffd3\000\002\001\uffdd\000\002\001\uffd5" +
    "\000\002\001\uffcf\000\004\047\u010f\001\uffc9\000\010\005" +
    "\023\011\u014f\021\u0151\001\ufff6\000\002\001\uffda\000\002" +
    "\001\uffd7\000\002\001\uffd9\000\004\005\023\001\ufff6\000" +
    "\002\001\uffd8\000\004\060\u0163\001\002\000\004\061\u015e" +
    "\001\002\000\004\071\010\001\uffe7\000\002\001\uffe9\000" +
    "\004\061\u0161\001\002\000\004\071\010\001\uffe7\000\002" +
    "\001\uffe8\000\022\016\057\047\064\053\070\054\051\070" +
    "\055\071\010\073\ufede\077\061\001\uff45\000\002\001\uffe4" +
    "\000\004\101\u016c\001\002\000\004\061\u0167\001\002\000" +
    "\004\071\010\001\ufff3\000\002\001\ufff5\000\004\061\u016a" +
    "\001\002\000\004\071\010\001\ufff3\000\002\001\ufff4\000" +
    "\010\053\070\054\051\077\061\001\ufede\000\002\001\ufff0" +
    "\000\026\012\u017b\023\u0173\025\u0184\027\u0183\032\u0175\035" +
    "\u017f\036\u0178\053\070\054\051\073\ufede\001\uffa9\000\002" +
    "\001\ufffc\000\002\001\uffab\000\004\061\u01c6\001\uffad\000" +
    "\002\001\uff8f\000\006\053\070\054\051\001\ufede\000\002" +
    "\001\uff99\000\006\053\070\054\051\001\ufede\000\004\060" +
    "\u01bc\001\002\000\002\001\uff9e\000\004\071\010\001\002" +
    "\000\006\022\u01a5\071\010\001\uffa7\000\002\001\uff9c\000" +
    "\026\012\u017b\023\u0173\025\u0184\027\u0183\032\u0175\035\u017f" +
    "\036\u0178\053\070\054\051\073\ufede\001\uffa9\000\002\001" +
    "\uff97\000\002\001\uff8e\000\002\001\ufef7\000\006\053\070" +
    "\054\051\001\ufede\000\002\001\uff9b\000\002\001\uff01\000" +
    "\002\001\uff98\000\004\071\010\001\002\000\026\012\u017b" +
    "\023\u0173\025\u0184\027\u0183\032\u0175\035\u017f\036\u0178\053" +
    "\070\054\051\073\ufede\001\uffa9\000\004\013\u0187\001\002" +
    "\000\002\001\uff9d\000\002\001\uffd4\000\004\026\u0189\001" +
    "\002\000\006\053\070\054\051\001\ufede\000\002\001\uff95" +
    "\000\002\001\uff10\000\004\067\u018d\001\002\000\006\053" +
    "\070\054\051\001\ufede\000\006\030\u0190\031\u0192\001\002" +
    "\000\002\001\uff91\000\002\001\uff93\000\006\053\070\054" +
    "\051\001\ufede\000\002\001\uff92\000\004\024\u0195\001\002" +
    "\000\002\001\uff90\000\026\012\u017b\023\u0173\025\u0184\027" +
    "\u0183\032\u0175\035\u017f\036\u0178\053\070\054\051\073\ufede" +
    "\001\uffa9\000\002\001\uff94\000\004\020\u0198\001\002\000" +
    "\010\053\070\054\051\077\061\001\ufede\000\004\061\u019d" +
    "\001\uff88\000\004\060\u019b\001\002\000\026\012\u017b\023" +
    "\u0173\025\u0184\027\u0183\032\u0175\035\u017f\036\u0178\053\070" +
    "\054\051\073\ufede\001\uffa9\000\002\001\uff87\000\010\053" +
    "\070\054\051\077\061\001\ufede\000\004\061\334\001\uff30" +
    "\000\004\013\u01a0\001\002\000\002\001\uff8a\000\004\061" +
    "\u019d\001\uff88\000\002\001\uff89\000\004\013\u01a4\001\002" +
    "\000\002\001\uff9a\000\006\053\070\054\051\001\ufede\000" +
    "\002\001\uffa6\000\002\001\uffa5\000\002\001\uffa4\000\010" +
    "\063\uff16\067\uffa2\070\uff19\001\uff13\000\004\067\u01b0\001" +
    "\002\000\002\001\uffa8\000\002\001\uffa1\000\002\001\uffac" +
    "\000\004\047\254\001\uff53\000\002\001\uffa0\000\006\053" +
    "\070\054\051\001\ufede\000\002\001\uffa3\000\002\001\uff9f" +
    "\000\006\062\u01b6\063\247\001\uff81\000\006\051\uff13\070" +
    "\uff19\001\uff16\000\002\001\uff12\000\004\071\010\001\002" +
    "\000\004\024\u01b8\001\002\000\026\012\u017b\023\u0173\025" +
    "\u0184\027\u0183\032\u0175\035\u017f\036\u0178\053\070\054\051" +
    "\073\ufede\001\uffa9\000\002\001\uff83\000\006\062\u01b6\063" +
    "\247\001\uff81\000\002\001\uff82\000\002\001\uffaa\000\004" +
    "\033\u01be\001\002\000\026\012\u017b\023\u0173\025\u0184\027" +
    "\u0183\032\u0175\035\u017f\036\u0178\053\070\054\051\073\ufede" +
    "\001\uffa9\000\004\034\u01c0\001\uff8c\000\026\012\u017b\023" +
    "\u0173\025\u0184\027\u0183\032\u0175\035\u017f\036\u0178\053\070" +
    "\054\051\073\ufede\001\uffa9\000\002\001\uff8d\000\002\001" +
    "\uff8b\000\004\024\u01c4\001\002\000\026\012\u017b\023\u0173" +
    "\025\u0184\027\u0183\032\u0175\035\u017f\036\u0178\053\070\054" +
    "\051\073\ufede\001\uffa9\000\002\001\uff96\000\026\012\u017b" +
    "\023\u0173\025\u0184\027\u0183\032\u0175\035\u017f\036\u0178\053" +
    "\070\054\051\073\ufede\001\uffa9\000\002\001\uffaf\000\004" +
    "\061\u01c6\001\uffad\000\002\001\uffae\000\004\062\u01cb\001" +
    "\ufff8\000\006\053\070\054\051\001\ufede\000\004\061\u01cd" +
    "\001\002\000\002\001\ufffa\000\004\062\u01cb\001\ufff8\000" +
    "\002\001\ufff9\000\002\001\001" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01ce\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\012\004\026\007\023\011\024\240\025\001\001" +
    "\000\004\042\006\001\001\000\004\220\011\001\001\000" +
    "\002\001\001\000\006\006\014\042\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\252\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\020\001\001" +
    "\000\002\001\001\000\004\252\021\001\001\000\002\001" +
    "\001\000\014\016\u01c9\177\u017d\202\u0180\207\071\210\073" +
    "\001\001\000\004\010\u016e\001\001\000\002\001\001\000" +
    "\006\012\031\241\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\u0165\042\u0164\001\001\000\002\001" +
    "\001\000\006\013\033\242\034\001\001\000\002\001\001" +
    "\000\006\014\374\243\373\001\001\000\006\021\037\042" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\021\042\042\036\274\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\021\042\042\036\274\044\001\001" +
    "\000\002\001\001\000\040\020\052\041\053\042\051\046" +
    "\057\132\062\133\072\134\064\135\066\136\055\161\047" +
    "\205\046\206\061\207\071\210\070\225\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\042" +
    "\051\046\366\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\364\042\013\001\001\000\002" +
    "\001\001\000\014\137\124\140\125\141\123\142\115\143" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\042\101\047\100\176\076\177\074\200\075\202\077\207" +
    "\071\210\073\244\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\203\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\217\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\202\113\207\071\210\073\001\001\000\002\001\001" +
    "\000\006\203\110\204\106\001\001\000\006\217\112\221" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\006\131\042" +
    "\013\150\126\151\134\152\133\153\130\163\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\227\340\001\001\000\004\261\334\001\001\000\004" +
    "\226\332\001\001\000\002\001\001\000\010\154\137\223" +
    "\136\224\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\042\051\046" +
    "\307\001\001\000\014\077\145\117\144\155\142\207\071" +
    "\210\143\001\001\000\002\001\001\000\004\222\304\001" +
    "\001\000\074\023\162\042\171\045\173\047\161\050\166" +
    "\051\167\076\204\131\200\164\165\165\163\166\206\167" +
    "\210\170\176\171\202\172\205\173\175\174\177\175\203" +
    "\176\212\177\074\200\075\202\077\205\170\206\061\207" +
    "\071\210\073\211\201\212\207\216\211\001\001\000\006" +
    "\126\151\233\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\117\157" +
    "\207\071\210\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\077\301\117\144\207\071\210" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\037\275\077\276\117\144\207\071\210" +
    "\143\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\276" +
    "\273\001\001\000\006\104\252\232\251\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\127\240\271\236\001\001" +
    "\000\002\001\001\000\004\277\234\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\130\221" +
    "\270\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\072\023\162\042\171\045\173\047\161\050\166" +
    "\051\167\076\204\131\200\164\165\165\163\166\206\167" +
    "\210\170\176\171\202\172\205\173\175\174\177\175\203" +
    "\176\212\177\074\200\075\202\077\205\170\206\061\207" +
    "\071\210\073\212\222\216\211\001\001\000\006\130\221" +
    "\270\223\001\001\000\002\001\001\000\014\077\226\100" +
    "\225\117\144\207\071\210\143\001\001\000\002\001\001" +
    "\000\004\253\230\001\001\000\012\077\231\117\144\207" +
    "\071\210\143\001\001\000\002\001\001\000\004\253\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\074\023\162\042\171\045\173\047\161\050\166\051" +
    "\167\076\204\131\200\164\165\165\163\166\206\167\210" +
    "\170\176\171\202\172\205\173\175\174\177\175\203\176" +
    "\212\177\074\200\075\202\077\205\170\206\061\207\071" +
    "\210\073\211\243\212\207\216\211\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\127\240\271\244\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\042\250\051" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\023\162\042\254\044" +
    "\265\045\264\051\167\076\261\077\260\101\263\102\262" +
    "\103\256\105\257\106\255\117\144\165\163\166\206\167" +
    "\210\170\176\171\202\172\205\173\175\174\177\175\203" +
    "\207\071\210\143\216\211\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\257\266\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\064\023\162\042\254\044\265\045\264\051" +
    "\167\076\261\077\260\101\263\102\262\103\270\105\257" +
    "\106\255\117\144\165\163\166\206\167\210\170\176\171" +
    "\202\172\205\173\175\174\177\175\203\207\071\210\143" +
    "\216\211\001\001\000\004\257\271\001\001\000\002\001" +
    "\001\000\002\001\001\000\072\023\162\042\171\045\173" +
    "\047\161\050\166\051\167\076\204\131\200\164\165\165" +
    "\163\166\206\167\210\170\176\171\202\172\205\173\175" +
    "\174\177\175\203\176\212\177\074\200\075\202\077\205" +
    "\170\206\061\207\071\210\073\212\274\216\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\253\277\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\077\306\117\144\207\071\210" +
    "\143\215\305\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\020\312\125" +
    "\313\156\311\205\046\206\061\207\071\210\070\001\001" +
    "\000\004\262\325\001\001\000\004\255\321\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\006\131\042\013" +
    "\150\126\151\134\152\316\153\130\163\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\020\322\205\046" +
    "\206\061\207\071\210\070\001\001\000\002\001\001\000" +
    "\004\255\323\001\001\000\002\001\001\000\020\020\312" +
    "\125\313\156\326\205\046\206\061\207\071\210\070\001" +
    "\001\000\002\001\001\000\004\262\327\001\001\000\002" +
    "\001\001\000\040\020\052\041\331\042\051\046\057\132" +
    "\062\133\072\134\064\135\066\136\055\161\047\205\046" +
    "\206\061\207\071\210\070\225\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\131\042\013\163\336\001\001\000\004\261" +
    "\337\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\151\342\001\001\000\002\001\001\000\042\020\052\041" +
    "\344\042\051\046\057\132\062\133\072\134\064\135\066" +
    "\136\055\146\345\161\047\205\046\206\061\207\071\210" +
    "\070\225\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\020\052\132\347\135\066\136\055\144\350\161" +
    "\047\205\046\206\061\207\071\210\070\001\001\000\002" +
    "\001\001\000\004\267\352\001\001\000\026\020\052\132" +
    "\347\135\066\136\055\144\357\161\047\205\046\206\061" +
    "\207\071\210\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\020\052\041\355\042\051\046\057\132\062" +
    "\133\072\134\064\135\066\136\055\145\356\161\047\205" +
    "\046\206\061\207\071\210\070\225\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\267\360\001\001\000" +
    "\002\001\001\000\042\020\052\041\362\042\051\046\057" +
    "\132\062\133\072\134\064\135\066\136\055\147\363\161" +
    "\047\205\046\206\061\207\071\210\070\225\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\020\370\162\371" +
    "\205\046\206\061\207\071\210\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\u015b\022\u015c\042\013" +
    "\001\001\000\024\015\u0105\024\u0103\025\u0101\027\u0102\030" +
    "\376\031\377\033\375\250\u0107\272\u0106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\042\u0154\044\u0153\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\042\u010a\045" +
    "\u010b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\024\u0103\025\u0101\027\u0102\030\376\031" +
    "\377\033\375\250\u0107\272\u0109\001\001\000\002\001\001" +
    "\000\006\036\u010d\237\u010c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\006\u0117\025\u0115" +
    "\031\u0112\042\013\052\u0119\053\u010f\054\u0114\055\u0111\056" +
    "\u0110\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\u0145\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\u0142\042\013" +
    "\001\001\000\002\001\001\000\004\042\u011b\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\036\u010d\237\u010c" +
    "\001\001\000\016\042\051\046\u0120\057\u011d\060\u0121\061" +
    "\u011e\062\u0122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\042\u0128\063\u0127\064\u0126\065\u012a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\066\u012d\001" +
    "\001\000\002\001\001\000\010\042\051\046\u0130\067\u012f" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\u0132\001\001\000\004\066\u0133\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\042\051\046\u0136\001\001\000" +
    "\002\001\001\000\012\042\u0128\063\u0138\064\u0126\065\u012a" +
    "\001\001\000\004\265\u013a\001\001\000\012\042\u0128\063" +
    "\u0140\064\u0126\065\u012a\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\042\051\046\u013d\060\u013e\061\u011e\062" +
    "\u0122\247\u013f\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\265\u0141\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\042\051\046\u0120\057\u0144" +
    "\060\u0121\061\u011e\062\u0122\001\001\000\002\001\001\000" +
    "\006\036\u010d\237\u0146\001\001\000\002\001\001\000\010" +
    "\040\u0149\042\051\046\u0148\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\u014c\007\023\011\024\026\u014b" +
    "\240\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\u014c\007\023\011\024\026\u014f\034\u0151\230\u0152" +
    "\240\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\036\u010d\237\u0146\001\001\000\020\004" +
    "\u0157\007\023\011\024\032\u0156\034\u0158\230\u0152\240\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\u0157\007\023\011\024\032\u015a\240\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\u015b\022\u015f\042\013\273\u015e\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\u015b\022" +
    "\u015f\042\013\273\u0161\001\001\000\002\001\001\000\040" +
    "\020\052\041\u0163\042\051\046\057\132\062\133\072\134" +
    "\064\135\066\136\055\161\047\205\046\206\061\207\071" +
    "\210\070\225\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\u0168\042\u0164\275\u0167" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\u0168\042\u0164\275\u016a\001\001\000\002\001\001\000\014" +
    "\020\u016c\205\046\206\061\207\071\210\070\001\001\000" +
    "\002\001\001\000\046\005\u0184\016\u0175\070\u0170\072\u016f" +
    "\107\u0176\110\u0185\111\u0179\112\u017f\113\u0173\114\u0181\115" +
    "\u017b\122\u0171\123\u017c\177\u017d\202\u0180\207\071\210\073" +
    "\236\u0178\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\264\u01c6\001\001\000\002\001\001\000\012\077\u01c2" +
    "\117\144\207\071\210\143\001\001\000\002\001\001\000" +
    "\012\077\u01bc\117\144\207\071\210\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\023\162\042\u01b4\051" +
    "\167\076\u01b3\165\163\166\206\167\210\170\176\171\202" +
    "\172\205\173\u01b2\174\177\175\203\216\211\001\001\000" +
    "\056\023\162\042\254\044\u01ad\045\u01ab\051\167\071\u01ac" +
    "\074\u01a6\075\u01a7\076\u01a8\121\u01a5\165\163\166\206\167" +
    "\210\170\176\171\202\172\205\173\175\174\177\175\203" +
    "\216\211\235\u01aa\246\u01a9\001\001\000\002\001\001\000" +
    "\046\005\u01a2\016\u0175\070\u0170\072\u016f\107\u0176\110\u0185" +
    "\111\u0179\112\u017f\113\u0173\114\u0181\115\u017b\122\u0171\123" +
    "\u017c\177\u017d\202\u0180\207\071\210\073\236\u0178\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\077\u0196\117\144\207\071\210\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\u018b\042\u018a\001\001\000\046\005\u0187\016\u0175\070\u0170" +
    "\072\u016f\107\u0176\110\u0185\111\u0179\112\u017f\113\u0173\114" +
    "\u0181\115\u017b\122\u0171\123\u017c\177\u017d\202\u0180\207\071" +
    "\210\073\236\u0178\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\077\u0189" +
    "\117\144\207\071\210\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\077\u018e\116\u018d" +
    "\117\144\207\071\210\143\001\001\000\004\245\u0190\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\077\u0193" +
    "\117\144\120\u0192\207\071\210\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\016\u0175" +
    "\070\u0195\072\u016f\107\u0176\110\u0185\111\u0179\112\u017f\113" +
    "\u0173\114\u0181\115\u017b\122\u0171\123\u017c\177\u017d\202\u0180" +
    "\207\071\210\073\236\u0178\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\020\312\124\u0198\125\u0199\205\046" +
    "\206\061\207\071\210\070\001\001\000\004\263\u019d\001" +
    "\001\000\002\001\001\000\044\016\u0175\070\u019b\072\u016f" +
    "\107\u0176\110\u0185\111\u0179\112\u017f\113\u0173\114\u0181\115" +
    "\u017b\122\u0171\123\u017c\177\u017d\202\u0180\207\071\210\073" +
    "\236\u0178\001\001\000\002\001\001\000\020\020\312\124" +
    "\u01a0\125\u0199\205\046\206\061\207\071\210\070\001\001" +
    "\000\004\226\u019e\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\263\u01a1\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\016\u01b1\177\u017d\202" +
    "\u0180\207\071\210\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\104\252\232\u01ae\001\001\000\002\001\001\000" +
    "\012\077\u01b0\117\144\207\071\210\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\256\u01b6\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\023\162\042\u01b4" +
    "\051\167\076\u01b3\165\163\166\206\167\210\170\176\171" +
    "\202\172\205\173\u01b9\174\177\175\203\216\211\001\001" +
    "\000\002\001\001\000\044\016\u0175\070\u01b8\072\u016f\107" +
    "\u0176\110\u0185\111\u0179\112\u017f\113\u0173\114\u0181\115\u017b" +
    "\122\u0171\123\u017c\177\u017d\202\u0180\207\071\210\073\236" +
    "\u0178\001\001\000\002\001\001\000\004\256\u01ba\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\016\u0175\070\u01be\072\u016f\107\u0176\110\u0185\111\u0179" +
    "\112\u017f\113\u0173\114\u0181\115\u017b\122\u0171\123\u017c\177" +
    "\u017d\202\u0180\207\071\210\073\236\u0178\001\001\000\004" +
    "\234\u01c0\001\001\000\044\016\u0175\070\u01c1\072\u016f\107" +
    "\u0176\110\u0185\111\u0179\112\u017f\113\u0173\114\u0181\115\u017b" +
    "\122\u0171\123\u017c\177\u017d\202\u0180\207\071\210\073\236" +
    "\u0178\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\016\u0175\070\u01c4\072\u016f\107\u0176\110" +
    "\u0185\111\u0179\112\u017f\113\u0173\114\u0181\115\u017b\122\u0171" +
    "\123\u017c\177\u017d\202\u0180\207\071\210\073\236\u0178\001" +
    "\001\000\002\001\001\000\044\016\u0175\070\u01c7\072\u016f" +
    "\107\u0176\110\u0185\111\u0179\112\u017f\113\u0173\114\u0181\115" +
    "\u017b\122\u0171\123\u017c\177\u017d\202\u0180\207\071\210\073" +
    "\236\u0178\001\001\000\002\001\001\000\004\264\u01c8\001" +
    "\001\000\002\001\001\000\004\260\u01cb\001\001\000\014" +
    "\016\u01cd\177\u017d\202\u0180\207\071\210\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\260\u01ce\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




 
    public void report_error(String message, Object info) {
   
        StringBuffer m = new StringBuffer("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
	
        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // identifier ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	System.out.println("IDENTIFIER: "+id);
	if(id != null) { 
		RESULT = id.toString();
	} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // string_character ::= STRINGCHARACTER 
            {
              Object RESULT =null;
		int strterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object strter = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(strter != null) {RESULT = strter.toString();} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string_character",132, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // sign_optional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign_optional",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // sign_optional ::= sign 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(s!= null) {RESULT = s;}  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign_optional",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // sign ::= MINUS 
            {
              Object RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object minus = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("minus", "arithmetic", "-" , (int) minus); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // sign ::= PLUS 
            {
              Object RESULT =null;
		int plusleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plusright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object plus = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("plus", "arithmetic", "+" , (int) plus); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // letter ::= LETTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("letter",138, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // string ::= string_character 
            {
              Object RESULT =null;
		int strchleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strchright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object strch = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(strch != null) {RESULT = strch.toString();} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // multiplication_operator ::= AND 
            {
              Object RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("and", "boolean", "and" , (int) and); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplication_operator",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // multiplication_operator ::= MOD 
            {
              Object RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int modright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object mod = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("mod", "arithmetic", "mod" , (int) mod); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplication_operator",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // multiplication_operator ::= DIVEXTENSION 
            {
              Object RESULT =null;
		int divextleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int divextright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object divext = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("divext", "arithmetic", "div" , (int) divext); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplication_operator",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // multiplication_operator ::= DIV 
            {
              Object RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int divright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object div = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("div", "arithmetic", "/" , (int) div); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplication_operator",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // multiplication_operator ::= TIMES 
            {
              Object RESULT =null;
		int timesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int timesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object times = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("times", "arithmetic", "*" , (int) times); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplication_operator",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // addition_operator ::= OR 
            {
              Object RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("or", "boolean", "or" , (int) or); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addition_operator",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // addition_operator ::= MINUS 
            {
              Object RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object minus = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("minus", "arithmetic", "-" , (int) minus); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addition_operator",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // addition_operator ::= PLUS 
            {
              Object RESULT =null;
		int plusleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plusright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object plus = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("plus", "arithmetic", "+" , (int) plus); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addition_operator",85, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // relational_operator ::= IN 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("in", "boolean", "in" , (int) in); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // relational_operator ::= GREATERTHENEQUALS 
            {
              Object RESULT =null;
		int gteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object gte = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("greaterthenequals", "boolean", ">=" , (int) gte); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // relational_operator ::= GREATERTHEN 
            {
              Object RESULT =null;
		int gtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object gt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("greaterthen", "boolean", ">" , (int) gt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // relational_operator ::= LESSTHENEQUALS 
            {
              Object RESULT =null;
		int lteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lte = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("lessthenequals", "boolean", "<=" , (int) lte); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // relational_operator ::= LESSTHEN 
            {
              Object RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("lessthen", "boolean", "<" , (int) lt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // relational_operator ::= DIFF 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("diff", "boolean", "<>" , (int) d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // relational_operator ::= EQUALS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("equals", "boolean", "=" , (int) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",84, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // constant_identifier_or_number ::= number 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_identifier_or_number",162, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // constant_identifier_or_number ::= constant_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_identifier_or_number",162, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // constant ::= string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // constant ::= sign_optional constant_identifier_or_number 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // label ::= integer_number 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(in!= null) {RESULT = in;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // digit_sequence ::= sign_optional unsigned_digit_sequence 
            {
              Object RESULT =null;
		int soleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int soright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object so = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int undigitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int undigitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object undigit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	if(undigit != null) {
		if(so != null){
			RESULT = so.toString() + undigit.toString();
		} else {
			RESULT = undigit.toString();
		}
	}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("digit_sequence",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // unsigned_digit_sequence_optional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unsigned_digit_sequence_optional",130, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // unsigned_digit_sequence_optional ::= unsigned_digit_sequence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unsigned_digit_sequence_optional",130, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // unsigned_digit_sequence ::= DIGITSEQUENCE 
            {
              Object RESULT =null;
		int digitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int digitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object digit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(digit!= null) {RESULT = digit;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unsigned_digit_sequence",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // scale_factor_optional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("scale_factor_optional",143, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // scale_factor_optional ::= scale_factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("scale_factor_optional",143, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // scale_factor ::= SCALEFACTOR digit_sequence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("scale_factor",141, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // real_number ::= digit_sequence scale_factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("real_number",126, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // real_number ::= digit_sequence DOT unsigned_digit_sequence_optional scale_factor_optional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("real_number",126, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // integer_number ::= digit_sequence 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(ds!= null) {RESULT = ds;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_number",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // number ::= real_number 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(rn!= null) {RESULT = "real";} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // number ::= integer_number 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(in!= null) {RESULT = "integer";} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // comma_expression ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_expression",169, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // comma_expression ::= COMMA expression comma_expression 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if(ex != null) {System.out.println("expression: " + ex);
																SemanticManager.getInstance().lineError = (int) ex;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_expression",169, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // comma_identifier ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_identifier",168, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // comma_identifier ::= COMMA identifier comma_identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if(id != null) {System.out.println("identifier: " + id);
																SemanticManager.getInstance().addIdentifier(id.toString());} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_identifier",168, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // comma_variable ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_variable",167, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // comma_variable ::= COMMA variable comma_variable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if(var != null) {System.out.println("variable: " + var);
																SemanticManager.getInstance().addIdentifier(var.toString());
																SemanticManager.getInstance().addVariable(var.toString(), ((Objeto) var).getTipo(), ((Objeto) var).getValor().toString());} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_variable",167, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // expression_list ::= expression comma_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // identifier_list ::= identifier comma_identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if(id != null){
															System.out.println("identifier: " + id);
															SemanticManager.getInstance().addIdentifier(id.toString());
														}  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // bound_identifier ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("bound variable: " + id); if(id != null) {RESULT = new Objeto(id.toString(), id.toString(), id , -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bound_identifier",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // function_identifier ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("function variable: " + id); if(id != null) {RESULT = new Objeto(id.toString(), id.toString(), id , -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_identifier",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // procedure_identifier ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("procedure variable: " + id); if(id != null) {RESULT = new Objeto(id.toString(), id.toString(), id , -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_identifier",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // type_identifier ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("type variable: " + id); if(id != null) {RESULT = new Objeto(id.toString(), id.toString(), id , 0);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_identifier",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // variable_identifier ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("variable identifier: " + id); if(id != null) {RESULT = new Objeto(id.toString(), id.toString(), id , -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_identifier",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // constant_identifier ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("constant variable: " + id); if(id != null) {RESULT = new Objeto(id.toString(), id.toString(), id , -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_identifier",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // field_identifier ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("field variable: " + id); if(id != null) {RESULT = new Objeto(id.toString(), id.toString(), id , -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_identifier",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // array_variable ::= variable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("array variable: " + var); if(var != null) {RESULT = new Objeto(var.toString(), var.toString(), var , -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_variable",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // actual_variable ::= variable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("actual variable: " + var); if(var != null) {RESULT = new Objeto(var.toString(), var.toString(), var , -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_variable",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // pointer_variable ::= variable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("pointer variable: " + var); if(var != null) {RESULT = new Objeto(var.toString(), var.toString(), var , -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointer_variable",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // record_variable ::= variable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("record variable: " + var); if(var != null) {RESULT = new Objeto(var.toString(), var.toString(), var , -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_variable",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // referenced_variable ::= pointer_variable NT$1 CIRCUNFLEX 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("referenced_variable",118, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // NT$1 ::= 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 System.out.println("referenced variable: " + var); if(var != null) {RESULT = new Objeto(var.toString(), var.toString(), var , -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",189, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // file_variable ::= variable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("file variable: " + var); if(var != null) {RESULT = new Objeto(var.toString(), var.toString(), var ,  -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("file_variable",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // fraction_length ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fraction_length",139, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // field_width ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_width",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // colon_fraction_length ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colon_fraction_length",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // colon_fraction_length ::= COLON fraction_length 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colon_fraction_length",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // semi_colon_field_width ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_field_width",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // semi_colon_field_width ::= SEMICOLON field_width colon_fraction_length 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_field_width",145, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // output_value ::= expression semi_colon_field_width 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("output_value",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // comma_output_value ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_output_value",170, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // comma_output_value ::= COMMA output_value comma_output_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_output_value",170, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // variant ::= case_label_list COLON LPARENT field_list RPARENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variant",108, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // identifier_colon ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_colon",146, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // identifier_colon ::= semi_colon_field_width 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_colon",146, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // tag_field ::= identifier_colon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tag_field",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // semi_colon_variant ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_variant",176, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // semi_colon_variant ::= SEMICOLON variant semi_colon_variant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_variant",176, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // variant_part ::= CASE tag_field type_identifier OF variant semi_colon_variant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variant_part",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // record_section ::= identifier_list COLON type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_section",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // semi_colon_record_section ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_record_section",175, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // semi_colon_record_section ::= SEMICOLON record_section semi_colon_record_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_record_section",175, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // fixed_part ::= record_section semi_colon_record_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fixed_part",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // semi_colon_variant_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_variant_part",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // semi_colon_variant_part ::= SEMICOLON variant_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_variant_part",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // semi_colon_optional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_optional",148, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // semi_colon_optional ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_optional",148, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // field_list_aux ::= variant_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list_aux",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // field_list_aux ::= fixed_part semi_colon_variant_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list_aux",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // field_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // field_list ::= field_list_aux semi_colon_optional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // pointer_type ::= CIRCUNFLEX type_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointer_type",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // file_component_type ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("file_component_type",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // file_type ::= FILE OF file_component_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("file_type",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // base_type ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_type",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // set_type ::= SET OF base_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_type",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // record_type ::= RECORD field_list END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_type",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // element_type ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element_type",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // index_type ::= simple_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index_type",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // colon_index_type ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colon_index_type",181, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // colon_index_type ::= COLON index_type colon_index_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colon_index_type",181, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // array_type ::= ARRAY LBRACKET index_type colon_index_type RBRACKET OF element_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",94, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // unpacked_structured_type ::= file_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unpacked_structured_type",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // unpacked_structured_type ::= set_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unpacked_structured_type",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // unpacked_structured_type ::= record_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unpacked_structured_type",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // unpacked_structured_type ::= array_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unpacked_structured_type",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // packed_optional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("packed_optional",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // packed_optional ::= PACKED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("packed_optional",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // structured_type ::= packed_optional unpacked_structured_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structured_type",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // upper_bound ::= constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("upper_bound",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // lower_bound ::= constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lower_bound",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // subrange_type ::= lower_bound DOUBLEDOT upper_bound 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subrange_type",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // enumerated_type ::= LPARENT identifier_list RPARENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enumerated_type",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // simple_type ::= enumerated_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_type",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // simple_type ::= subrange_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_type",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // type ::= type_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // type ::= pointer_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // type ::= structured_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // type ::= simple_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // file_buffer ::= file_variable CIRCUNFLEX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("file_buffer",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // actual_parameter_list_optional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameter_list_optional",152, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // actual_parameter_list_optional ::= actual_parameter_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameter_list_optional",152, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // function_designator ::= function_identifier actual_parameter_list_optional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_designator",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // element_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // element_list ::= expression comma_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // set ::= LBRACKET element_list RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // field_designator ::= record_variable DOT field_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_designator",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // indexed_variable ::= array_variable LBRACKET expression_list RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("indexed_variable",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // component_variable ::= file_buffer 
            {
              Object RESULT =null;
		int fbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(fb != null) {RESULT = fb;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("component_variable",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // component_variable ::= field_designator 
            {
              Object RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(fd != null) {RESULT = fd;}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("component_variable",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // component_variable ::= indexed_variable 
            {
              Object RESULT =null;
		int ivleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ivright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object iv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(iv != null) {RESULT = iv;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("component_variable",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // entire_variable ::= field_identifier 
            {
              Object RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int firight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(fi != null) {RESULT = fi;}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entire_variable",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // entire_variable ::= variable_identifier 
            {
              Object RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int viright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(vi != null) {RESULT = vi;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entire_variable",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // variable ::= referenced_variable 
            {
              Object RESULT =null;
		int rvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(rv != null) {System.out.println("referenced variable: " + rv); RESULT = rv;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // variable ::= component_variable 
            {
              Object RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(cv != null) {System.out.println("component variable : " + cv); RESULT = cv;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // variable ::= entire_variable 
            {
              Object RESULT =null;
		int evleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int evright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ev = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(ev != null) {System.out.println("entire variable: " + ev); RESULT = ev;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // factor ::= NOT NT$0 factor 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int notleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int notright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // NT$0 ::= 
            {
              Object RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 RESULT = new Objeto("not", "boolean", "not" , (int) not); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",188, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // factor ::= LPARENT expression RPARENT 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if(exp != null) { RESULT = exp; } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // factor ::= function_designator 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // factor ::= bound_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // factor ::= constant_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // factor ::= NIL 
            {
              Object RESULT =null;
		 RESULT = "nil"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // factor ::= set 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // factor ::= string 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(str != null) { RESULT = "string"; } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // factor ::= number 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(n != null) { RESULT = n;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // factor ::= variable 
            {
              Object RESULT =null;
		int varileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vari = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(vari != null) { RESULT = vari;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // multiplication_operator_factor ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplication_operator_factor",182, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // multiplication_operator_factor ::= multiplication_operator factor multiplication_operator_factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplication_operator_factor",182, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // term ::= factor multiplication_operator_factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // addition_operator_term ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addition_operator_term",183, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // addition_operator_term ::= addition_operator term addition_operator_term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addition_operator_term",183, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // simple_expression ::= sign_optional term addition_operator_term 
            {
              Object RESULT =null;
		int terleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int terright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ter = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // relational_operator_simple_expression ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator_simple_expression",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // relational_operator_simple_expression ::= relational_operator simple_expression 
            {
              Object RESULT =null;
		int relopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int relopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object relop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object sexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("RELOP: " + ((Objeto) relop).getId()); 
															if(relop != null){ 
																SemanticManager.getInstance().lineError = ((Objeto) relop).getLineError();
															} if(sexp != null){ 
																SemanticManager.getInstance().checkBooleanExpression(sexp.toString());
															} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator_simple_expression",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expression ::= simple_expression relational_operator_simple_expression 
            {
              Object RESULT =null;
		int sexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object sexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int relopseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int relopseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object relopse = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 	if(sexp != null){
		RESULT = sexp;
		
	} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // actual_function ::= function_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_function",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // actual_procedure ::= procedure_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_procedure",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // actual_value ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_value",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // actual_parameter ::= actual_function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameter",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // actual_parameter ::= actual_procedure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameter",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // actual_parameter ::= actual_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameter",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // actual_parameter ::= actual_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameter",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // comma_actual_parameter ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_actual_parameter",173, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // comma_actual_parameter ::= COMMA actual_parameter comma_actual_parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_actual_parameter",173, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // actual_parameter_list ::= LPARENT actual_parameter comma_actual_parameter RPARENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameter_list",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // comma_record_variable ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_record_variable",172, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // comma_record_variable ::= COMMA record_variable comma_record_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_record_variable",172, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // with_statement ::= WITH record_variable comma_record_variable DO statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("with_statement",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // comma_constant ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_constant",171, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // comma_constant ::= COMMA constant comma_constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_constant",171, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // case_label_list ::= constant comma_constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_label_list",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // case_limb ::= case_label_list COLON statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_limb",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // semi_colon_case_limb ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_case_limb",177, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // semi_colon_case_limb ::= SEMICOLON case_limb semi_colon_case_limb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_case_limb",177, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // case_statement ::= CASE expression OF case_limb semi_colon_case_limb semi_colon_optional END 
            {
              Object RESULT =null;
		int casestmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int casestmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object casestm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 System.out.println("CASE: " + exp); 
																						if(casestm != null){ 
																							SemanticManager.getInstance().lineError = ((int) casestm);
																						} if(exp != null) {
																							SemanticManager.getInstance().checkIfThenElseExpression(exp.toString());
																							RESULT = exp;
																						} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_statement",81, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // else_statement_optional ::= ELSE statement 
            {
              Object RESULT =null;
		int elsestmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elsestmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object elsestm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("ELSE: " + stm); 
															if(elsestm != null){ 
																SemanticManager.getInstance().lineError = ((int) elsestm);
															} if(stm != null){ 
																SemanticManager.getInstance().checkIfThenElseExpression(stm.toString());
																RESULT = stm;
															} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement_optional",154, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // else_statement_optional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_statement_optional",154, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // if_statement ::= IF expression THEN statement else_statement_optional 
            {
              Object RESULT =null;
		int ifstmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int ifstmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object ifstm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 System.out.println("IF: " + exp); 
															if(ifstm != null){ 
																SemanticManager.getInstance().lineError = ((int) ifstm);
															} if(exp != null) {	
																SemanticManager.getInstance().checkIfThenElseExpression(exp.toString());
																RESULT = exp;
															}  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",80, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // conditional_statement ::= case_statement 
            {
              Object RESULT =null;
		int casestmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int casestmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object casestm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(casestm != null) {RESULT = casestm;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_statement",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // conditional_statement ::= if_statement 
            {
              Object RESULT =null;
		int ifstmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifstmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ifstm = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(ifstm != null) {RESULT = ifstm;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_statement",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // final_expression ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("final_expression",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // initial_expression ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial_expression",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // to_or_downto ::= DOWNTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("to_or_downto",163, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // to_or_downto ::= TO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("to_or_downto",163, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // for_statement ::= FOR variable_identifier ASSIGMENT initial_expression to_or_downto final_expression DO statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_statement",75, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // repeat_statement ::= REPEAT statement_sequence UNTIL expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repeat_statement",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // while_statement ::= WHILE expression DO statement 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expwleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expwright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object expw = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 System.out.println("WHILE: " + expw); 
															if(w != null){ 
																SemanticManager.getInstance().lineError = ((int) w);
															} if(expw != null){ 
																SemanticManager.getInstance().checkWhileExpression(expw.toString());
															} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // repetitive_statement ::= for_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repetitive_statement",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // repetitive_statement ::= repeat_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repetitive_statement",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // repetitive_statement ::= while_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repetitive_statement",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // compound_statement ::= BEGIN statement_sequence END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // structured_statement ::= with_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structured_statement",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // structured_statement ::= conditional_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structured_statement",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // structured_statement ::= repetitive_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structured_statement",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // structured_statement ::= compound_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structured_statement",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // goto_statement ::= GOTO label 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("goto_statement",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // procedure_statement ::= procedure_identifier actual_parameter_list_optional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_statement",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // variable_or_function_identifier ::= function_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_or_function_identifier",164, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // variable_or_function_identifier ::= variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_or_function_identifier",164, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // assignment_statement ::= variable_or_function_identifier ASSIGMENT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_statement",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // simple_statement_optional ::= goto_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_statement_optional",155, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // simple_statement_optional ::= procedure_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_statement_optional",155, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // simple_statement_optional ::= assignment_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_statement_optional",155, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // simple_statement ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_statement",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // simple_statement ::= simple_statement_optional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_statement",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // label_colon ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_colon",156, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // label_colon ::= label COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_colon",156, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // statement ::= structured_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // statement ::= label_colon simple_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // semi_colon_statement ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_statement",178, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // semi_colon_statement ::= SEMICOLON statement semi_colon_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_statement",178, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // statement_sequence ::= statement semi_colon_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ordinal_type_identifier ::= type_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ordinal_type_identifier",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ordinal_type_identifier_optional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ordinal_type_identifier_optional",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ordinal_type_identifier_optional ::= COLON ordinal_type_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ordinal_type_identifier_optional",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // bound_digit_sequence_production ::= DIGITSEQUENCE DOUBLEDOT DIGITSEQUENCE ordinal_type_identifier_optional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bound_digit_sequence_production",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // bound_identifier_production ::= identifier DOUBLEDOT identifier ordinal_type_identifier_optional 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if(id != null && id1 !=null){
															System.out.println("identifier:id: " + id);
															System.out.println("identifier:id: " + id1);
															SemanticManager.getInstance().addIdentifier(id.toString());
															SemanticManager.getInstance().addIdentifier(id1.toString());
														}  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bound_identifier_production",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // bound_specification ::= bound_digit_sequence_production 
            {
              Object RESULT =null;
		int bdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object bds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(bds != null) { RESULT = bds;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bound_specification",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // bound_specification ::= bound_identifier_production 
            {
              Object RESULT =null;
		int bipleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bipright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object bip = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(bip != null) { RESULT = bip;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bound_specification",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // type_identifier_or_conformant_array_schema ::= conformant_array_schema 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_identifier_or_conformant_array_schema",165, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // type_identifier_or_conformant_array_schema ::= type_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_identifier_or_conformant_array_schema",165, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // semi_colon_bound_specification ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_bound_specification",179, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // semi_colon_bound_specification ::= SEMICOLON bound_specification semi_colon_bound_specification 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_bound_specification",179, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // unpacked_conformant_array_schema ::= ARRAY LBRACKET bound_specification semi_colon_bound_specification RBRACKET OF type_identifier_or_conformant_array_schema 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unpacked_conformant_array_schema",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // packed_conformant_array_schema ::= PACKED ARRAY LBRACKET bound_specification RBRACKET OF type_identifier 
            {
              Object RESULT =null;
		int pcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object pc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object bs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(pc != null){
		SemanticManager.getInstance().lineError = ((int) pc);
	 } if(rt != null){ 
		System.out.println("type identifier: " + rt);		 
		RESULT = rt; 
	} if(bs != null){ 
		System.out.println("bound specification: " + bs);
	} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("packed_conformant_array_schema",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // conformant_array_schema ::= unpacked_conformant_array_schema 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conformant_array_schema",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // conformant_array_schema ::= packed_conformant_array_schema 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conformant_array_schema",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parameter_type ::= conformant_array_schema 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_type",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parameter_type ::= type_identifier 
            {
              Object RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ti = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(ti != null){ 
		System.out.println("type identifier: " + ti);		 
		RESULT = ti; 
	} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_type",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // function_parameter_section ::= function_heading 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_parameter_section",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // procedure_parameter_section ::= procedure_heading 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_parameter_section",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // variable_parameter_section ::= VAR identifier_list COLON parameter_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_parameter_section",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // value_parameter_section ::= identifier_list COLON parameter_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value_parameter_section",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // formal_parameter_section ::= function_parameter_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_section",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // formal_parameter_section ::= procedure_parameter_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_section",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // formal_parameter_section ::= variable_parameter_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_section",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // formal_parameter_section ::= value_parameter_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_section",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // formal_parameter_list_optinonal ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list_optinonal",157, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // formal_parameter_list_optinonal ::= formal_parameter_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list_optinonal",157, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // semi_colon_formal_parameter_section ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_formal_parameter_section",180, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // semi_colon_formal_parameter_section ::= SEMICOLON formal_parameter_section semi_colon_formal_parameter_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_formal_parameter_section",180, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // formal_parameter_list ::= LPARENT formal_parameter_section RPARENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // function_identification ::= FUNCTION function_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_identification",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // procedure_identification ::= PROCEDURE procedure_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_identification",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // result_type ::= type_identifier 
            {
              Object RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(rt != null){ 
			System.out.println("result type : " + rt);		 
			RESULT = rt; 
			} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("result_type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // function_heading ::= FUNCTION identifier formal_parameter_list_optinonal COLON result_type 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object fp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		System.out.println("function heading returned type: " + fp);
		if(f != null){ 
			System.out.println("entrou no f !=null");
			SemanticManager.getInstance().lineError = ((int) f);
		} if(id != null){ 
			System.out.println("entrou no id!=null ");
			System.out.println("rt: " + rt);
			SemanticManager.getInstance().addIdentifier(id.toString());
			SemanticManager.getInstance().addFunction(id.toString(), rt.toString());
		} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_heading",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // procedure_heading ::= PROCEDURE identifier formal_parameter_list_optinonal 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println("PROCEDURE: " + p); 
															if(p != null){ 
																SemanticManager.getInstance().lineError = ((int) p);
															} if(id != null){
																System.out.println("identifier: " + id);
																SemanticManager.getInstance().addIdentifier(id.toString());
																SemanticManager.getInstance().addProcedure(id.toString());
															} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_heading",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // compiler_defined_directives ::= EXTERNAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compiler_defined_directives",150, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement_part ::= BEGIN statement_sequence END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_part",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // directive ::= compiler_defined_directives 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("directive",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // directive ::= FORWARD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("directive",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // function_body ::= block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_body",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // function_declaration ::= function_identification SEMICOLON function_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // function_declaration ::= function_heading SEMICOLON directive 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // function_declaration ::= function_heading SEMICOLON function_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // procedure_body ::= block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_body",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // procedure_declaration ::= procedure_identification SEMICOLON procedure_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // procedure_declaration ::= procedure_heading SEMICOLON directive 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // procedure_declaration ::= procedure_heading SEMICOLON procedure_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // procedure_declaration_or_function_declaration ::= function_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration_or_function_declaration",166, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // procedure_declaration_or_function_declaration ::= procedure_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration_or_function_declaration",166, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // procedure_declaration_or_function_declaration_semi_colon ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration_or_function_declaration_semi_colon",184, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // procedure_declaration_or_function_declaration_semi_colon ::= procedure_declaration_or_function_declaration SEMICOLON procedure_declaration_or_function_declaration_semi_colon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration_or_function_declaration_semi_colon",184, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // procedure_and_function_declaration_part ::= procedure_declaration_or_function_declaration_semi_colon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_and_function_declaration_part",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // variable_declaration ::= identifier_list COLON type 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(il != null){ 
			System.out.println("VARIABLE DECLARATION : " + il);		 
			RESULT = il;}
	   if(tp != null){
	     SemanticManager.getInstance().addIdentifier(il.toString());
	   	 SemanticManager.getInstance().addVariable(il.toString(), tp.toString(), "null");
	} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // variable_declaration_part_optional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part_optional",161, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // variable_declaration_part_optional ::= variable_declaration_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part_optional",161, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // variable_declaration_semi_colon ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_semi_colon",185, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variable_declaration_semi_colon ::= variable_declaration SEMICOLON variable_declaration_semi_colon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_semi_colon",185, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variable_declaration_part ::= VAR variable_declaration SEMICOLON variable_declaration_semi_colon 
            {
              Object RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 if(va != null){ 
			SemanticManager.getInstance().lineError = ((int) va);
		} if(var != null) {
		//*************************
		//*************************
		//*************************
		System.out.println("VARIABLE DECLARATION PART: " + var);		 
			RESULT = var; 
		} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type_definition ::= identifier EQUALS type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type_definition_part_optional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_part_optional",160, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type_definition_part_optional ::= type_definition_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_part_optional",160, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type_definition_semi_colon ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_semi_colon",186, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type_definition_semi_colon ::= type_definition SEMICOLON type_definition_semi_colon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_semi_colon",186, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type_definition_part ::= TYPE type_definition SEMICOLON type_definition_semi_colon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_part",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // constant_definition ::= identifier EQUALS constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // constant_definition_part_optional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition_part_optional",159, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constant_definition_part_optional ::= constant_definition_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition_part_optional",159, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constant_definition_semi_colon ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition_semi_colon",187, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constant_definition_semi_colon ::= constant_definition SEMICOLON constant_definition_semi_colon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition_semi_colon",187, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constant_definition_part ::= CONST constant_definition SEMICOLON constant_definition_semi_colon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition_part",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // label_declaration_part_optional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part_optional",158, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // label_declaration_part_optional ::= label_declaration_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part_optional",158, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // comma_label ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_label",174, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // comma_label ::= COMMA label comma_label 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lid2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lid2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lid2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
		if(c != null){ 
			SemanticManager.getInstance().lineError = ((int) c);
		} 
		if(lid2 != null){ 
			SemanticManager.getInstance().addLabel(Integer.parseInt(lid2.toString()));
		}  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_label",174, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // label_declaration_part ::= LABEL label comma_label SEMICOLON 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lid = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
		if(le != null){ 
			SemanticManager.getInstance().lineError = ((int) le);
		} if(lid != null){ 
			SemanticManager.getInstance().addLabel(Integer.parseInt(lid.toString()));
		}  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration_part ::= label_declaration_part_optional constant_definition_part_optional type_definition_part_optional variable_declaration_part_optional procedure_and_function_declaration_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_part",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // block ::= declaration_part statement_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // arguments_optional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments_optional",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // arguments_optional ::= LPARENT identifier_list RPARENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments_optional",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_heading ::= PROGRAM identifier arguments_optional SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_heading",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= program_heading block DOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

