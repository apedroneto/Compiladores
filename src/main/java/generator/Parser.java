
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Dec 05 00:54:59 BRT 2018
//----------------------------------------------------

package generator;

import utils.SemanticManager;
import utils.Objeto;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Dec 05 00:54:59 BRT 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\361\000\002\002\004\000\002\002\005\000\002\003" +
    "\006\000\002\175\005\000\002\175\002\000\002\004\004" +
    "\000\002\007\007\000\002\011\006\000\002\234\005\000" +
    "\002\234\002\000\002\214\003\000\002\214\002\000\002" +
    "\012\006\000\002\250\005\000\002\250\002\000\002\215" +
    "\003\000\002\215\002\000\002\020\005\000\002\013\006" +
    "\000\002\247\005\000\002\247\002\000\002\216\003\000" +
    "\002\216\002\000\002\022\005\000\002\014\006\000\002" +
    "\246\005\000\002\246\002\000\002\217\003\000\002\217" +
    "\002\000\002\023\005\000\002\016\011\000\002\017\003" +
    "\000\002\017\002\000\002\025\003\000\002\025\003\000" +
    "\002\010\005\000\002\205\003\000\002\031\003\000\002" +
    "\027\005\000\002\242\005\000\002\242\002\000\002\213" +
    "\003\000\002\213\002\000\002\041\003\000\002\041\003" +
    "\000\002\042\005\000\002\043\006\000\002\045\003\000" +
    "\002\241\005\000\002\241\002\000\002\046\003\000\002" +
    "\046\003\000\002\047\006\000\002\050\006\000\002\051" +
    "\004\000\002\051\002\000\002\052\003\000\002\005\004" +
    "\000\002\240\005\000\002\240\002\000\002\053\003\000" +
    "\002\053\003\000\002\212\004\000\002\212\002\000\002" +
    "\054\003\000\002\054\002\000\002\211\003\000\002\103" +
    "\005\000\002\224\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003\000\002\055\003\000\002\072\005\000" +
    "\002\073\003\000\002\076\006\000\002\100\003\000\002" +
    "\102\003\000\002\231\005\000\002\231\002\000\002\075" +
    "\007\000\002\232\005\000\002\232\002\000\002\071\006" +
    "\000\002\233\005\000\002\233\002\000\002\070\003\000" +
    "\002\070\003\000\002\067\003\000\002\061\003\000\002" +
    "\061\003\000\002\061\003\000\002\221\005\000\002\220" +
    "\003\000\002\220\003\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\060\003\000\002\210\004\000" +
    "\002\210\002\000\002\101\005\000\002\245\005\000\002" +
    "\245\002\000\002\166\004\000\002\244\005\000\002\244" +
    "\002\000\002\167\003\000\002\167\003\000\002\167\003" +
    "\000\002\167\003\000\002\167\003\000\002\167\003\000" +
    "\002\167\003\000\002\167\005\000\002\251\002\000\002" +
    "\167\005\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\145\003\000\002\145\003\000\002\146\003" +
    "\000\002\146\003\000\002\144\005\000\002\112\005\000" +
    "\002\030\004\000\002\030\002\000\002\207\003\000\002" +
    "\207\002\000\002\173\004\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\113\003" +
    "\000\002\113\003\000\002\117\005\000\002\116\005\000" +
    "\002\141\003\000\002\142\003\000\002\114\004\000\002" +
    "\202\003\000\002\202\002\000\002\120\003\000\002\120" +
    "\003\000\002\120\003\000\002\243\005\000\002\243\002" +
    "\000\002\124\003\000\002\125\003\000\002\121\005\000" +
    "\002\132\004\000\002\132\002\000\002\133\004\000\002" +
    "\133\003\000\002\203\003\000\002\203\002\000\002\204" +
    "\004\000\002\204\002\000\002\130\004\000\002\235\005" +
    "\000\002\235\002\000\002\143\005\000\002\131\010\000" +
    "\002\236\005\000\002\236\002\000\002\134\003\000\002" +
    "\201\003\000\002\201\002\000\002\136\007\000\002\230" +
    "\005\000\002\230\002\000\002\137\004\000\002\200\005" +
    "\000\002\200\002\000\002\177\004\000\002\177\002\000" +
    "\002\135\003\000\002\172\003\000\002\151\003\000\002" +
    "\252\002\000\002\147\005\000\002\150\003\000\002\152" +
    "\003\000\002\066\003\000\002\040\003\000\002\036\003" +
    "\000\002\024\003\000\002\035\003\000\002\037\003\000" +
    "\002\006\004\000\002\065\004\000\002\225\005\000\002" +
    "\225\002\000\002\226\005\000\002\226\002\000\002\227" +
    "\005\000\002\227\002\000\002\153\003\000\002\153\003" +
    "\000\002\062\003\000\002\062\003\000\002\154\003\000" +
    "\002\155\006\000\002\155\004\000\002\174\004\000\002" +
    "\176\003\000\002\176\002\000\002\160\003\000\002\161" +
    "\003\000\002\161\002\000\002\157\004\000\002\015\003" +
    "\000\002\021\004\000\002\021\003\000\002\222\003\000" +
    "\002\222\003\000\002\107\003\000\002\107\003\000\002" +
    "\107\003\000\002\107\003\000\002\107\003\000\002\107" +
    "\003\000\002\107\003\000\002\110\003\000\002\110\003" +
    "\000\002\111\003\000\002\111\003\000\002\111\003\000" +
    "\002\111\003\000\002\162\003\000\002\171\003\000\002" +
    "\164\003\000\002\164\003\000\002\165\003\000\002\165" +
    "\002\000\002\063\003\000\002\064\003\000\002\163\003" +
    "\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0112\000\004\004\006\001\002\000\004\002\u0114\001" +
    "\002\000\004\005\023\001\ufff6\000\004\064\010\001\002" +
    "\000\004\042\011\001\ufffd\000\002\001\uff11\000\004\064" +
    "\010\001\002\000\004\054\013\001\002\000\002\001\uffff" +
    "\000\004\055\017\001\uff3d\000\004\043\016\001\002\000" +
    "\002\001\ufffe\000\004\064\010\001\002\000\002\001\uff42" +
    "\000\004\055\017\001\uff3d\000\002\001\uff3e\000\006\046" +
    "\067\047\051\001\uff15\000\004\012\342\001\002\000\002" +
    "\001\ufff7\000\004\006\031\001\ufff1\000\004\056\030\001" +
    "\002\000\002\001\000\000\004\064\010\001\002\000\002" +
    "\001\ufff2\000\004\007\036\001\uffeb\000\002\001\uffec\000" +
    "\004\010\304\001\uffe5\000\004\064\010\001\002\000\004" +
    "\074\046\001\002\000\004\054\041\001\002\000\004\064" +
    "\010\001\uffed\000\002\001\uffef\000\004\054\044\001\002" +
    "\000\004\064\010\001\uffed\000\002\001\uffee\000\020\014" +
    "\056\042\063\046\067\047\051\064\010\066\uff15\072\060" +
    "\001\uff72\000\002\001\uff2a\000\004\057\301\001\002\000" +
    "\002\001\uff18\000\002\001\uff76\000\002\001\uff44\000\002" +
    "\001\uffea\000\002\001\uff79\000\002\001\uff73\000\002\001" +
    "\uff7b\000\002\001\uff12\000\002\001\uff1a\000\002\001\uff7e" +
    "\000\004\064\010\001\002\000\004\037\115\001\002\000" +
    "\002\001\uff7c\000\002\001\uff7a\000\002\001\uff17\000\010" +
    "\046\067\047\051\064\010\001\uff15\000\002\001\uff16\000" +
    "\002\001\uff7d\000\004\066\107\001\002\000\002\001\uff3a" +
    "\000\002\001\uff39\000\002\001\uff28\000\006\056\105\103" +
    "\103\001\uff36\000\002\001\uff29\000\002\001\uff46\000\002" +
    "\001\uff2b\000\006\046\067\047\051\001\uff15\000\002\001" +
    "\uff34\000\004\066\107\001\uff2e\000\004\103\103\001\uff31" +
    "\000\002\001\uff30\000\002\001\uff2f\000\002\001\uff35\000" +
    "\002\001\uff32\000\002\001\uff33\000\002\001\uff2d\000\006" +
    "\026\126\064\010\001\uff68\000\002\001\uff6f\000\002\001" +
    "\uff74\000\002\001\uff71\000\002\001\uff70\000\004\054\275" +
    "\001\uff62\000\004\054\271\001\uff5f\000\004\054\267\001" +
    "\uff64\000\004\053\264\001\002\000\004\054\134\001\uff58" +
    "\000\004\013\131\001\002\000\002\001\uff66\000\002\001" +
    "\uff6a\000\002\001\uff59\000\004\064\010\001\002\000\012" +
    "\035\140\036\142\046\067\047\051\001\uff15\000\002\001" +
    "\uff5a\000\022\030\176\031\167\042\201\044\175\046\067" +
    "\047\051\064\010\072\060\001\uff15\000\004\053\156\001" +
    "\uff50\000\006\033\uff37\034\uff37\001\uff14\000\002\001\uffa1" +
    "\000\006\033\uff38\034\uff38\001\uff13\000\002\001\uff9f\000" +
    "\002\001\uff4f\000\002\001\uffa2\000\002\001\uffa0\000\006" +
    "\033\152\034\150\001\002\000\002\001\uffa4\000\006\035" +
    "\153\036\154\001\002\000\002\001\uffa3\000\002\001\uff37" +
    "\000\002\001\uff38\000\002\001\uffa5\000\012\035\140\036" +
    "\142\046\067\047\051\001\uff15\000\002\001\uff53\000\002" +
    "\001\uff4e\000\002\001\uff51\000\002\001\uff94\000\002\001" +
    "\uff95\000\004\063\247\001\002\000\002\001\uff47\000\002" +
    "\001\uff89\000\002\001\uff8e\000\002\001\uff8c\000\002\001" +
    "\uff87\000\002\001\uff8a\000\002\001\uff8b\000\002\001\uff91" +
    "\000\014\035\140\036\142\045\uff82\046\067\047\051\001" +
    "\uff15\000\002\001\uff92\000\002\001\uff90\000\002\001\uff88" +
    "\000\012\035\140\036\142\046\067\047\051\001\uff15\000" +
    "\002\001\uff93\000\012\032\226\050\227\051\230\052\225" +
    "\001\uff97\000\002\001\uff86\000\004\056\221\001\002\000" +
    "\006\046\216\047\214\001\uff9a\000\006\056\uff4a\063\uff4d" +
    "\001\uff96\000\002\001\uff4c\000\004\063\212\001\002\000" +
    "\002\001\uff4b\000\002\001\uff9c\000\002\001\uff20\000\022" +
    "\030\176\031\167\042\201\044\175\046\067\047\051\064" +
    "\010\072\060\001\uff15\000\002\001\uff1f\000\006\046\216" +
    "\047\214\001\uff9a\000\002\001\uff9b\000\004\064\010\001" +
    "\002\000\002\001\uff85\000\002\001\uff47\000\002\001\uff99" +
    "\000\002\001\uff1b\000\002\001\uff1c\000\002\001\uff1d\000" +
    "\002\001\uff1e\000\022\030\176\031\167\042\201\044\175" +
    "\046\067\047\051\064\010\072\060\001\uff15\000\012\032" +
    "\226\050\227\051\230\052\225\001\uff97\000\002\001\uff98" +
    "\000\004\043\235\001\002\000\002\001\uff8f\000\004\045" +
    "\244\001\002\000\004\055\240\001\uff3b\000\012\035\140" +
    "\036\142\046\067\047\051\001\uff15\000\002\001\uff83\000" +
    "\004\055\240\001\uff3b\000\002\001\uff3c\000\002\001\uff84" +
    "\000\022\030\176\031\167\042\201\044\175\046\067\047" +
    "\051\064\010\072\060\001\uff15\000\002\001\uff8d\000\002" +
    "\001\uff7f\000\004\015\251\001\002\000\002\001\002\000" +
    "\004\054\260\001\uff5b\000\004\053\254\001\002\000\004" +
    "\042\255\001\002\000\006\026\126\064\010\001\uff68\000" +
    "\004\043\257\001\002\000\002\001\uff57\000\002\001\002" +
    "\000\002\001\uff5d\000\004\054\260\001\uff5b\000\002\001" +
    "\uff5c\000\020\014\056\042\063\046\067\047\051\064\010" +
    "\066\uff15\072\060\001\uff72\000\002\001\uff5e\000\002\001" +
    "\uff69\000\002\001\uff65\000\002\001\uff61\000\004\064\010" +
    "\001\002\000\004\054\271\001\uff5f\000\002\001\uff60\000" +
    "\002\001\uff67\000\004\026\126\001\002\000\002\001\uff63" +
    "\000\004\043\300\001\002\000\002\001\uff78\000\010\046" +
    "\067\047\051\072\060\001\uff15\000\002\001\uff75\000\002" +
    "\001\uff77\000\004\064\010\001\002\000\004\007\311\001" +
    "\uffe1\000\002\001\uffe6\000\002\001\uffe2\000\002\001\ufffb" +
    "\000\004\064\010\001\002\000\004\074\313\001\002\000" +
    "\004\037\314\001\002\000\006\026\126\064\010\001\uff68" +
    "\000\004\013\316\001\002\000\004\054\317\001\002\000" +
    "\002\001\uffe3\000\004\053\327\001\002\000\004\054\322" +
    "\001\002\000\004\064\010\001\uffe7\000\002\001\uffe9\000" +
    "\004\054\325\001\002\000\004\064\010\001\uffe7\000\002" +
    "\001\uffe8\000\020\014\056\042\063\046\067\047\051\064" +
    "\010\066\uff15\072\060\001\uff72\000\002\001\uffe4\000\004" +
    "\074\340\001\002\000\004\054\333\001\002\000\004\064" +
    "\010\001\ufff3\000\002\001\ufff5\000\004\054\336\001\002" +
    "\000\004\064\010\001\ufff3\000\002\001\ufff4\000\010\046" +
    "\067\047\051\072\060\001\uff15\000\002\001\ufff0\000\012" +
    "\012\355\017\347\027\353\064\010\001\uffc0\000\002\001" +
    "\ufffc\000\002\001\uffc4\000\004\054\u0108\001\uffc6\000\002" +
    "\001\uff47\000\012\035\u0102\036\u0104\046\067\047\051\001" +
    "\uff15\000\002\001\uffb7\000\002\001\uffbf\000\002\001\uffbc" +
    "\000\004\064\010\001\002\000\002\001\uffba\000\012\012" +
    "\355\017\347\027\353\064\010\001\uffc0\000\006\062\uffbd" +
    "\063\uff4d\001\uff4a\000\004\062\366\001\002\000\002\001" +
    "\uffb9\000\002\001\uffc1\000\002\001\uffc5\000\004\013\365" +
    "\001\002\000\002\001\uffbb\000\002\001\uffde\000\012\035" +
    "\140\036\142\046\067\047\051\001\uff15\000\002\001\uffbe" +
    "\000\004\013\371\001\002\000\002\001\uffb8\000\006\055" +
    "\374\056\221\001\uffaf\000\004\063\uff4d\001\uff4a\000\004" +
    "\064\010\001\002\000\004\020\376\001\002\000\012\012" +
    "\355\017\347\027\353\064\010\001\uffc0\000\002\001\uffb1" +
    "\000\006\055\374\056\221\001\uffaf\000\002\001\uffb0\000" +
    "\004\020\uffa8\001\uff37\000\004\020\u0106\001\002\000\004" +
    "\020\uffa7\001\uff38\000\002\001\uffa6\000\012\012\355\017" +
    "\347\027\353\064\010\001\uffc0\000\002\001\uffb6\000\012" +
    "\012\355\017\347\027\353\064\010\001\uffc0\000\002\001" +
    "\uffc8\000\004\054\u0108\001\uffc6\000\002\001\uffc7\000\002" +
    "\001\uff2c\000\004\055\u010f\001\ufff8\000\002\001\uff36\000" +
    "\006\046\067\047\051\001\uff15\000\004\054\u0111\001\002" +
    "\000\002\001\ufffa\000\004\055\u010f\001\ufff8\000\002\001" +
    "\ufff9\000\002\001\001" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0112\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\012\004\026\007\023\011\024\214\025\001\001" +
    "\000\004\033\006\001\001\000\004\175\011\001\001\000" +
    "\002\001\001\000\006\006\014\033\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\226\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\020\001\001" +
    "\000\002\001\001\000\004\226\021\001\001\000\002\001" +
    "\001\000\014\015\u010c\154\u010b\157\u010d\164\070\165\072" +
    "\001\001\000\004\010\342\001\001\000\002\001\001\000" +
    "\006\012\031\215\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\020\331\033\330\001\001\000\002\001" +
    "\001\000\006\013\033\216\034\001\001\000\002\001\001" +
    "\000\006\014\305\217\304\001\001\000\006\022\037\033" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\022\042\033\036\247\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\022\042\033\036\247\044\001\001" +
    "\000\002\001\001\000\040\021\051\032\053\033\052\035" +
    "\056\113\061\114\071\115\064\116\065\117\054\141\047" +
    "\162\046\163\060\164\070\165\067\202\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\276\033" +
    "\013\001\001\000\012\120\116\121\117\122\120\123\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\033\100\036\077\153\075\154\073\155\074" +
    "\157\076\164\070\165\072\222\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\160\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\174" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\157\112\164\070\165\072\001\001\000" +
    "\002\001\001\000\006\160\107\161\105\001\001\000\006" +
    "\174\111\176\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\006\124\033\013\130\121\131" +
    "\127\132\126\133\123\143\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\204\273\001\001\000\004\235\267\001\001\000\004" +
    "\203\265\001\001\000\002\001\001\000\010\134\132\200" +
    "\131\201\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\033\052\035" +
    "\247\001\001\000\024\060\143\062\146\063\140\064\145" +
    "\101\142\135\136\164\070\165\135\221\144\001\001\000" +
    "\002\001\001\000\064\024\165\033\164\036\173\037\176" +
    "\040\177\057\206\112\201\144\170\145\167\146\172\147" +
    "\171\150\204\151\163\152\207\153\162\154\073\155\074" +
    "\157\076\162\161\163\060\164\070\165\072\166\205\167" +
    "\202\173\203\001\001\000\004\177\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\220\150\001\001\000\002\001\001\000\004\062" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\060\157\062\146\063" +
    "\140\064\145\101\142\164\070\165\135\172\160\221\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\251\244\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\030\235\060" +
    "\236\062\146\063\140\064\145\101\142\164\070\165\135" +
    "\221\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\060\233\062\146\063\140\064\145" +
    "\101\142\164\070\165\135\221\144\001\001\000\002\001" +
    "\001\000\006\111\230\244\223\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\110\214\245\212\001\001\000" +
    "\002\001\001\000\004\252\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\064\024\165\033\164\036\173\037\176\040\177\057\206" +
    "\112\201\144\170\145\167\146\172\147\171\150\204\151" +
    "\163\152\207\153\162\154\073\155\074\157\076\162\161" +
    "\163\060\164\070\165\072\166\216\167\202\173\203\001" +
    "\001\000\002\001\001\000\006\110\214\245\217\001\001" +
    "\000\002\001\001\000\006\033\222\040\221\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\024\165\033\164\036\173\037\176\040\177" +
    "\057\206\112\201\144\170\145\167\146\172\147\171\150" +
    "\204\151\163\152\207\153\162\154\073\155\074\157\076" +
    "\162\161\163\060\164\070\165\072\167\231\173\203\001" +
    "\001\000\006\111\230\244\232\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\227\240\001\001\000\022\060\241\062\146\063\140" +
    "\064\145\101\142\164\070\165\135\221\144\001\001\000" +
    "\002\001\001\000\004\227\242\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\024\165\033\164\036\173\037" +
    "\176\040\177\057\206\112\201\144\170\145\167\146\172" +
    "\147\171\150\204\151\163\152\207\153\162\154\073\155" +
    "\074\157\076\162\161\163\060\164\070\165\072\167\245" +
    "\173\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\106\252\136\251\001\001\000\004" +
    "\236\260\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\124\033\013\130\121\131\127\132\255\133\123" +
    "\143\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\106\252\136\261\001\001\000\002\001\001\000\004" +
    "\236\262\001\001\000\002\001\001\000\040\021\051\032" +
    "\264\033\052\035\056\113\061\114\071\115\064\116\065" +
    "\117\054\141\047\162\046\163\060\164\070\165\067\202" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\124\033\013\143" +
    "\271\001\001\000\004\235\272\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\131\275\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\021\301" +
    "\142\302\162\046\163\060\164\070\165\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\317\023\320" +
    "\033\013\001\001\000\006\016\306\017\307\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\311\033\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\006\124\033\013\130\121\131\127\132\314" +
    "\133\123\143\122\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\317\023\323\033\013\246\322\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\317\023\323" +
    "\033\013\246\325\001\001\000\002\001\001\000\040\021" +
    "\051\032\327\033\052\035\056\113\061\114\071\115\064" +
    "\116\065\117\054\141\047\162\046\163\060\164\070\165" +
    "\067\202\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\334\033\330\250\333\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\334" +
    "\033\330\250\336\001\001\000\002\001\001\000\014\021" +
    "\340\162\046\163\060\164\070\165\067\001\001\000\002" +
    "\001\001\000\062\005\362\024\165\033\345\040\177\053" +
    "\344\054\361\055\343\057\355\072\351\073\363\074\353" +
    "\075\357\076\347\103\350\144\170\145\167\146\172\147" +
    "\171\150\204\151\163\152\207\173\203\211\360\224\356" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\240" +
    "\u0108\001\001\000\002\001\001\000\024\060\u0104\061\u0102" +
    "\062\146\063\140\064\145\101\142\164\070\165\135\221" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\024\165\033\345\040\177\057\372\144" +
    "\170\145\167\146\172\147\171\150\371\151\163\152\207" +
    "\173\203\001\001\000\002\001\001\000\062\005\367\024" +
    "\165\033\345\040\177\053\344\054\361\055\343\057\355" +
    "\072\351\073\363\074\353\075\357\076\347\103\350\144" +
    "\170\145\167\146\172\147\171\150\204\151\163\152\207" +
    "\173\203\211\360\224\356\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\060\366\062\146\063\140\064\145\101\142" +
    "\164\070\165\135\221\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\232\374\001\001" +
    "\000\002\001\001\000\032\024\165\033\345\040\177\057" +
    "\372\144\170\145\167\146\172\147\171\150\377\151\163" +
    "\152\207\173\203\001\001\000\002\001\001\000\060\024" +
    "\165\033\345\040\177\053\376\054\361\055\343\057\355" +
    "\072\351\073\363\074\353\075\357\076\347\103\350\144" +
    "\170\145\167\146\172\147\171\150\204\151\163\152\207" +
    "\173\203\211\360\224\356\001\001\000\002\001\001\000" +
    "\004\232\u0100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\024\165\033\345\040\177\053\u0106\054\361\055\343" +
    "\057\355\072\351\073\363\074\353\075\357\076\347\103" +
    "\350\144\170\145\167\146\172\147\171\150\204\151\163" +
    "\152\207\173\203\211\360\224\356\001\001\000\002\001" +
    "\001\000\060\024\165\033\345\040\177\053\u0109\054\361" +
    "\055\343\057\355\072\351\073\363\074\353\075\357\076" +
    "\347\103\350\144\170\145\167\146\172\147\171\150\204" +
    "\151\163\152\207\173\203\211\360\224\356\001\001\000" +
    "\002\001\001\000\004\240\u010a\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\234\u010f\001\001\000\002\001" +
    "\001\000\014\015\u0111\154\u010b\157\u010d\164\070\165\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\234" +
    "\u0112\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




 
    public void report_error(String message, Object info) {
   
        StringBuffer m = new StringBuffer("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
	
        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // identifier ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
	System.out.println("IDENTIFIER: "+id);
	if(id != null) { 
		RESULT = id.toString();
	} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // string_character ::= STRINGCHARACTER 
            {
              Object RESULT =null;
		int strterleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strterright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object strter = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(strter != null) {RESULT = strter.toString();} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string_character",113, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // false ::= FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("false",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // true ::= TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("true",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // sign_optional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign_optional",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // sign_optional ::= sign 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(s!= null) {RESULT = s;}  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign_optional",115, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // sign ::= MINUS 
            {
              Object RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object minus = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("minus", "arithmetic", "-" , (int) minus); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // sign ::= PLUS 
            {
              Object RESULT =null;
		int plusleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plusright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object plus = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("plus", "arithmetic", "+" , (int) plus); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign",114, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // letter ::= LETTER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("letter",119, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // string ::= string_character 
            {
              Object RESULT =null;
		int strchleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strchright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object strch = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(strch != null) {RESULT = strch.toString();} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",112, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // multiplication_operator ::= MOD 
            {
              Object RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int modright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object mod = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("mod", "arithmetic", "mod" , (int) mod); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplication_operator",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // multiplication_operator ::= DIVEXTENSION 
            {
              Object RESULT =null;
		int divextleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int divextright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object divext = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("divext", "arithmetic", "div" , (int) divext); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplication_operator",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // multiplication_operator ::= DIV 
            {
              Object RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int divright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object div = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("div", "arithmetic", "/" , (int) div); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplication_operator",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // multiplication_operator ::= TIMES 
            {
              Object RESULT =null;
		int timesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int timesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object times = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("times", "arithmetic", "*" , (int) times); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplication_operator",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // addition_operator ::= MINUS 
            {
              Object RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object minus = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("minus", "arithmetic", "-" , (int) minus); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addition_operator",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // addition_operator ::= PLUS 
            {
              Object RESULT =null;
		int plusleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plusright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object plus = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("plus", "arithmetic", "+" , (int) plus); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addition_operator",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // relational_operator ::= IN 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("in", "boolean", "in" , (int) in); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // relational_operator ::= GREATERTHENEQUALS 
            {
              Object RESULT =null;
		int gteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object gte = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("greaterthenequals", "boolean", ">=" , (int) gte); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // relational_operator ::= GREATERTHEN 
            {
              Object RESULT =null;
		int gtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int gtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object gt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("greaterthen", "boolean", ">" , (int) gt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // relational_operator ::= LESSTHENEQUALS 
            {
              Object RESULT =null;
		int lteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lte = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("lessthenequals", "boolean", "<=" , (int) lte); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // relational_operator ::= LESSTHEN 
            {
              Object RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("lessthen", "boolean", "<" , (int) lt); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // relational_operator ::= DIFF 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("diff", "boolean", "<>" , (int) d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // relational_operator ::= EQUALS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("equals", "boolean", "=" , (int) e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // constant_identifier_or_number ::= number 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_identifier_or_number",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // constant_identifier_or_number ::= constant_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_identifier_or_number",144, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // constant ::= string 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // constant ::= sign_optional constant_identifier_or_number 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // label ::= integer_number 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(in!= null) {RESULT = in;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // digit_sequence ::= sign_optional unsigned_digit_sequence 
            {
              Object RESULT =null;
		int soleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int soright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object so = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int undigitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int undigitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object undigit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	if(undigit != null) {
		if(so != null){
			RESULT = so.toString() + undigit.toString();
		} else {
			RESULT = undigit.toString();
		}
	}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("digit_sequence",109, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // unsigned_digit_sequence_optional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unsigned_digit_sequence_optional",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // unsigned_digit_sequence_optional ::= unsigned_digit_sequence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unsigned_digit_sequence_optional",111, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // unsigned_digit_sequence ::= DIGITSEQUENCE 
            {
              Object RESULT =null;
		int digitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int digitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object digit = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(digit!= null) {RESULT = digit;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unsigned_digit_sequence",110, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // scale_factor_optional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("scale_factor_optional",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // scale_factor_optional ::= scale_factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("scale_factor_optional",124, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // scale_factor ::= SCALEFACTOR digit_sequence 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("scale_factor",122, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // real_number ::= digit_sequence scale_factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("real_number",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // real_number ::= digit_sequence DOT unsigned_digit_sequence_optional scale_factor_optional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("real_number",107, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // integer_number ::= digit_sequence 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(ds!= null) {RESULT = ds;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("integer_number",106, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // bol ::= TRUE 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(rn!= null) {RESULT = "boolean";} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bol",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // bol ::= FALSE 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(in!= null) {RESULT = "boolean";} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bol",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // number ::= real_number 
            {
              Object RESULT =null;
		int rnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rn = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(rn!= null) {RESULT = "real";} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // number ::= integer_number 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(in!= null) {RESULT = "integer";} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",105, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // comma_expression ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_expression",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // comma_expression ::= COMMA expression comma_expression 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if(ex != null) {System.out.println("expression: " + ex);
																SemanticManager.getInstance().lineError = (int) ex;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_expression",149, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // comma_identifier ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_identifier",148, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // comma_identifier ::= COMMA identifier comma_identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if(id != null) {System.out.println("identifier: " + id);
																SemanticManager.getInstance().addIdentifier(id.toString());} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_identifier",148, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // comma_variable ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_variable",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // comma_variable ::= COMMA variable comma_variable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if(var != null) {System.out.println("variable: " + var);
																SemanticManager.getInstance().addIdentifier(var.toString());
																SemanticManager.getInstance().addVariable(var.toString(), ((Objeto) var).getTipo(), ((Objeto) var).getValor().toString());} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_variable",147, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // expression_list ::= expression comma_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // identifier_list ::= identifier comma_identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if(id != null){
															System.out.println("identifier: " + id);
															SemanticManager.getInstance().addIdentifier(id.toString());
														}  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // bound_identifier ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("bound variable: " + id); if(id != null) {RESULT = new Objeto(id.toString(), id.toString(), id , -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bound_identifier",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // type_identifier ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("type variable: " + id); if(id != null) {RESULT = new Objeto(id.toString(), id.toString(), id , 0);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_identifier",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // variable_identifier ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("variable identifier: " + id); if(id != null) {RESULT = new Objeto(id.toString(), id.toString(), id , -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_identifier",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // constant_identifier ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("constant variable: " + id); if(id != null) {RESULT = new Objeto(id.toString(), id.toString(), id , -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_identifier",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // field_identifier ::= identifier 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("field variable: " + id); if(id != null) {RESULT = new Objeto(id.toString(), id.toString(), id , -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_identifier",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // actual_variable ::= variable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("actual variable: " + var); if(var != null) {RESULT = new Objeto(var.toString(), var.toString(), var , -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_variable",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // pointer_variable ::= variable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("pointer variable: " + var); if(var != null) {RESULT = new Objeto(var.toString(), var.toString(), var , -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointer_variable",104, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // record_variable ::= variable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("record variable: " + var); if(var != null) {RESULT = new Objeto(var.toString(), var.toString(), var , -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_variable",102, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // referenced_variable ::= pointer_variable NT$1 CIRCUNFLEX 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("referenced_variable",101, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // NT$1 ::= 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 System.out.println("referenced variable: " + var); if(var != null) {RESULT = new Objeto(var.toString(), var.toString(), var , -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",168, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // file_variable ::= variable 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("file variable: " + var); if(var != null) {RESULT = new Objeto(var.toString(), var.toString(), var ,  -1);} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("file_variable",103, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // fraction_length ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fraction_length",120, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // field_width ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_width",91, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // colon_fraction_length ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colon_fraction_length",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // colon_fraction_length ::= COLON fraction_length 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colon_fraction_length",125, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // semi_colon_field_width ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_field_width",126, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // semi_colon_field_width ::= SEMICOLON field_width colon_fraction_length 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_field_width",126, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // output_value ::= expression semi_colon_field_width 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("output_value",93, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // comma_output_value ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_output_value",150, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // comma_output_value ::= COMMA output_value comma_output_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_output_value",150, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // variant ::= case_label_list COLON LPARENT field_list RPARENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variant",92, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // identifier_colon ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_colon",127, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // identifier_colon ::= semi_colon_field_width 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_colon",127, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // tag_field ::= identifier_colon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tag_field",90, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // semi_colon_variant ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_variant",156, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // semi_colon_variant ::= SEMICOLON variant semi_colon_variant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_variant",156, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // variant_part ::= CASE tag_field type_identifier OF variant semi_colon_variant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variant_part",87, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // record_section ::= identifier_list COLON type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_section",97, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // semi_colon_record_section ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_record_section",155, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // semi_colon_record_section ::= SEMICOLON record_section semi_colon_record_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_record_section",155, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // fixed_part ::= record_section semi_colon_record_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fixed_part",86, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // semi_colon_variant_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_variant_part",130, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // semi_colon_variant_part ::= SEMICOLON variant_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_variant_part",130, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // semi_colon_optional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_optional",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // semi_colon_optional ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_optional",129, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // field_list_aux ::= variant_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list_aux",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // field_list_aux ::= fixed_part semi_colon_variant_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list_aux",89, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // field_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // field_list ::= field_list_aux semi_colon_optional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",88, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // record_type ::= RECORD field_list END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_type",79, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // element_type ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element_type",83, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // index_type ::= simple_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index_type",82, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // colon_index_type ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colon_index_type",161, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // colon_index_type ::= COLON index_type colon_index_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("colon_index_type",161, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // unpacked_structured_type ::= file_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unpacked_structured_type",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // unpacked_structured_type ::= set_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unpacked_structured_type",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // unpacked_structured_type ::= record_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unpacked_structured_type",78, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // packed_optional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("packed_optional",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // packed_optional ::= PACKED 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("packed_optional",128, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // structured_type ::= packed_optional unpacked_structured_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structured_type",74, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // upper_bound ::= constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("upper_bound",96, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // lower_bound ::= constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lower_bound",95, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // subrange_type ::= lower_bound DOUBLEDOT upper_bound 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subrange_type",76, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // enumerated_type ::= LPARENT identifier_list RPARENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enumerated_type",77, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // simple_type ::= enumerated_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_type",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // simple_type ::= subrange_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_type",73, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // type ::= type_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // type ::= pointer_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // type ::= structured_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // type ::= simple_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // file_buffer ::= file_variable CIRCUNFLEX 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("file_buffer",121, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // actual_parameter_list_optional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameter_list_optional",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // actual_parameter_list_optional ::= actual_parameter_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameter_list_optional",133, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // element_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // element_list ::= expression comma_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // set ::= LBRACKET element_list RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set",72, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // field_designator ::= record_variable DOT field_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_designator",98, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // component_variable ::= file_buffer 
            {
              Object RESULT =null;
		int fbleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fbright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fb = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(fb != null) {RESULT = fb;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("component_variable",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // component_variable ::= field_designator 
            {
              Object RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(fd != null) {RESULT = fd;}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("component_variable",100, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // entire_variable ::= field_identifier 
            {
              Object RESULT =null;
		int fileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int firight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(fi != null) {RESULT = fi;}
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entire_variable",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // entire_variable ::= variable_identifier 
            {
              Object RESULT =null;
		int vileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int viright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(vi != null) {RESULT = vi;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("entire_variable",99, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // variable ::= referenced_variable 
            {
              Object RESULT =null;
		int rvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(rv != null) {System.out.println("referenced variable: " + rv); RESULT = rv;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // variable ::= component_variable 
            {
              Object RESULT =null;
		int cvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(cv != null) {System.out.println("component variable : " + cv); RESULT = cv;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // variable ::= entire_variable 
            {
              Object RESULT =null;
		int evleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int evright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ev = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(ev != null) {System.out.println("entire variable: " + ev); RESULT = ev;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // factor ::= NOT NT$0 factor 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int notleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int notright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$0 ::= 
            {
              Object RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
 RESULT = new Objeto("not", "boolean", "not" , (int) not); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",167, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // factor ::= LPARENT expression RPARENT 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if(exp != null) { RESULT = exp; } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // factor ::= bound_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // factor ::= constant_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // factor ::= NIL 
            {
              Object RESULT =null;
		 RESULT = "nil"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // factor ::= set 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // factor ::= string 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(str != null) { RESULT = "string"; } 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // factor ::= number 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("numero"+n); if(n != null) { RESULT = n;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // factor ::= variable 
            {
              Object RESULT =null;
		int varileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int variright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vari = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(vari != null) { RESULT = vari;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",117, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // multiplication_operator_factor ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplication_operator_factor",162, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // multiplication_operator_factor ::= multiplication_operator factor multiplication_operator_factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplication_operator_factor",162, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // term ::= factor multiplication_operator_factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",116, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // addition_operator_term ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addition_operator_term",163, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // addition_operator_term ::= addition_operator term addition_operator_term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("addition_operator_term",163, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // simple_expression ::= sign_optional term addition_operator_term 
            {
              Object RESULT =null;
		int terleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int terright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ter = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // relational_operator_simple_expression ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator_simple_expression",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // relational_operator_simple_expression ::= relational_operator simple_expression 
            {
              Object RESULT =null;
		int relopleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int relopright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object relop = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object sexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("RELOP: " + ((Objeto) relop).getId()); 
															if(relop != null){ 
																SemanticManager.getInstance().lineError = ((Objeto) relop).getLineError();
															} if(sexp != null){ 
																SemanticManager.getInstance().checkBooleanExpression(sexp.toString());
															} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_operator_simple_expression",134, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expression ::= simple_expression 
            {
              Object RESULT =null;
		int sexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object sexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("sexp= " + sexp); RESULT = "integer"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expression ::= false 
            {
              Object RESULT =null;
		int var2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "boolean";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expression ::= true 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "boolean";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expression ::= boolean_expression 
            {
              Object RESULT =null;
		int bexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object bexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("bexp= "+ bexp);
 	if(bexp != null){
		RESULT = bexp;

	} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // boolean_operator ::= OR 
            {
              Object RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("or", "boolean", "or" , (int) or); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operator",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // boolean_operator ::= AND 
            {
              Object RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Objeto("and", "boolean", "and" , (int) and); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_operator",142, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // boolean_expression ::= bol boolean_operator bol 
            {
              Object RESULT =null;
		int bol1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bol1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object bol1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bol2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bol2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object bol2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = "boolean";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean_expression",143, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expression_while ::= expression 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_while",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression_while ::= FALSE 
            {
              Object RESULT =null;
		int var2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "boolean";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_while",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression_while ::= TRUE 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = "boolean";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_while",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // actual_value ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_value",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // actual_parameter ::= actual_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameter",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // actual_parameter ::= actual_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameter",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // comma_actual_parameter ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_actual_parameter",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // comma_actual_parameter ::= COMMA actual_parameter comma_actual_parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_actual_parameter",153, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // actual_parameter_list ::= LPARENT actual_parameter comma_actual_parameter RPARENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("actual_parameter_list",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // comma_record_variable ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_record_variable",152, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // comma_record_variable ::= COMMA record_variable comma_record_variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_record_variable",152, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // with_statement ::= WITH record_variable comma_record_variable DO statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("with_statement",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // comma_constant ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_constant",151, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // comma_constant ::= COMMA constant comma_constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_constant",151, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // final_expression ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("final_expression",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // initial_expression ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial_expression",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // while_statement ::= WHILE expression_while DO statement 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expwleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expwright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object expw = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 System.out.println("WHILE: " + expw + "teste"+w);
															if(w != null){ 
																SemanticManager.getInstance().lineError = ((int) w);
															} if(expw != null){ 
																SemanticManager.getInstance().checkWhileExpression(expw.toString());
															} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // repetitive_statement ::= while_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("repetitive_statement",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // compound_statement ::= BEGIN statement_sequence END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // structured_statement ::= with_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structured_statement",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // structured_statement ::= conditional_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structured_statement",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // structured_statement ::= repetitive_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structured_statement",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // structured_statement ::= compound_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structured_statement",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // variable_or_function_identifier ::= variable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_or_function_identifier",146, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // assignment_statement ::= variable_or_function_identifier ASSIGMENT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment_statement",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // simple_statement_optional ::= assignment_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_statement_optional",135, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // simple_statement ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // simple_statement ::= simple_statement_optional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_statement",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // label_colon ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_colon",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // label_colon ::= label COLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_colon",136, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // statement ::= structured_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement ::= simple_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // semi_colon_statement ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_statement",158, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // semi_colon_statement ::= SEMICOLON statement semi_colon_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_statement",158, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // statement_sequence ::= statement semi_colon_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_sequence",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ordinal_type_identifier ::= type_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ordinal_type_identifier",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ordinal_type_identifier_optional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ordinal_type_identifier_optional",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ordinal_type_identifier_optional ::= COLON ordinal_type_identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ordinal_type_identifier_optional",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bound_digit_sequence_production ::= DIGITSEQUENCE DOUBLEDOT DIGITSEQUENCE ordinal_type_identifier_optional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bound_digit_sequence_production",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bound_identifier_production ::= identifier DOUBLEDOT identifier ordinal_type_identifier_optional 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 if(id != null && id1 !=null){
															System.out.println("identifier:id: " + id);
															System.out.println("identifier:id: " + id1);
															SemanticManager.getInstance().addIdentifier(id.toString());
															SemanticManager.getInstance().addIdentifier(id1.toString());
														}  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bound_identifier_production",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bound_specification ::= bound_digit_sequence_production 
            {
              Object RESULT =null;
		int bdsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bdsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object bds = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(bds != null) { RESULT = bds;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bound_specification",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bound_specification ::= bound_identifier_production 
            {
              Object RESULT =null;
		int bipleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bipright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object bip = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(bip != null) { RESULT = bip;} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bound_specification",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // semi_colon_bound_specification ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_bound_specification",159, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // semi_colon_bound_specification ::= SEMICOLON bound_specification semi_colon_bound_specification 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_bound_specification",159, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parameter_type ::= type_identifier 
            {
              Object RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ti = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(ti != null){
		System.out.println("type identifier: " + ti);		 
		RESULT = ti; 
	} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter_type",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // variable_parameter_section ::= VAR identifier_list COLON parameter_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_parameter_section",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // value_parameter_section ::= identifier_list COLON parameter_type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value_parameter_section",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // formal_parameter_section ::= variable_parameter_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_section",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // formal_parameter_section ::= value_parameter_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_section",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // formal_parameter_list_optinonal ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list_optinonal",137, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // formal_parameter_list_optinonal ::= formal_parameter_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list_optinonal",137, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // semi_colon_formal_parameter_section ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_formal_parameter_section",160, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // semi_colon_formal_parameter_section ::= SEMICOLON formal_parameter_section semi_colon_formal_parameter_section 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("semi_colon_formal_parameter_section",160, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // formal_parameter_list ::= LPARENT formal_parameter_section RPARENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // result_type ::= type_identifier 
            {
              Object RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(rt != null){ 
			System.out.println("result type : " + rt);		 
			RESULT = rt; 
			} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("result_type",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // compiler_defined_directives ::= EXTERNAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compiler_defined_directives",131, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement_part ::= BEGIN statement_sequence END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_part",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // directive ::= compiler_defined_directives 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("directive",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // directive ::= FORWARD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("directive",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // record_declaration_part_optional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_declaration_part_optional",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // record_declaration_part_optional ::= record_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_declaration_part_optional",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // record_declaration ::= TYPE identifier_list EQUALS RECORD field_list END SEMICOLON 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_declaration",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // variable_declaration ::= identifier_list COLON type 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if(il != null){ 
			System.out.println("VARIABLE DECLARATION : " + il);		 
			RESULT = il;}
	   if(tp != null){
	     SemanticManager.getInstance().addIdentifier(il.toString());
	   	 SemanticManager.getInstance().addVariable(il.toString(), tp.toString(), "null");
	} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // variable_declaration_part_optional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part_optional",141, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // variable_declaration_part_optional ::= variable_declaration_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part_optional",141, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // variable_declaration_semi_colon ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_semi_colon",164, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // variable_declaration_semi_colon ::= variable_declaration SEMICOLON variable_declaration_semi_colon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_semi_colon",164, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variable_declaration_part ::= VAR variable_declaration SEMICOLON variable_declaration_semi_colon 
            {
              Object RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 if(va != null){ 
			SemanticManager.getInstance().lineError = ((int) va);
		} if(var != null) {
		//*************************
		//*************************
		//*************************
		System.out.println("VARIABLE DECLARATION PART: " + var);		 
			RESULT = var; 
		} 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type_definition ::= identifier EQUALS type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type_definition_part_optional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_part_optional",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type_definition_part_optional ::= type_definition_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_part_optional",140, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type_definition_semi_colon ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_semi_colon",165, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type_definition_semi_colon ::= type_definition SEMICOLON type_definition_semi_colon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_semi_colon",165, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type_definition_part ::= TYPE type_definition SEMICOLON type_definition_semi_colon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_part",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // constant_definition ::= identifier EQUALS constant 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // constant_definition_part_optional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition_part_optional",139, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constant_definition_part_optional ::= constant_definition_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition_part_optional",139, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constant_definition_semi_colon ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition_semi_colon",166, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constant_definition_semi_colon ::= constant_definition SEMICOLON constant_definition_semi_colon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition_semi_colon",166, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constant_definition_part ::= CONST constant_definition SEMICOLON constant_definition_semi_colon 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition_part",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // label_declaration_part_optional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part_optional",138, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // label_declaration_part_optional ::= label_declaration_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part_optional",138, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // comma_label ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_label",154, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // comma_label ::= COMMA label comma_label 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int lid2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lid2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object lid2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
		if(c != null){ 
			SemanticManager.getInstance().lineError = ((int) c);
		} 
		if(lid2 != null){ 
			SemanticManager.getInstance().addLabel(Integer.parseInt(lid2.toString()));
		}  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comma_label",154, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // label_declaration_part ::= LABEL label comma_label SEMICOLON 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lid = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		  
		if(le != null){ 
			SemanticManager.getInstance().lineError = ((int) le);
		} if(lid != null){ 
			SemanticManager.getInstance().addLabel(Integer.parseInt(lid.toString()));
		}  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration_part ::= label_declaration_part_optional constant_definition_part_optional type_definition_part_optional variable_declaration_part_optional record_declaration_part_optional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_part",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // block ::= declaration_part statement_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // arguments_optional ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments_optional",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // arguments_optional ::= LPARENT identifier_list RPARENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments_optional",123, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_heading ::= PROGRAM identifier arguments_optional SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_heading",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= program_heading block DOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

